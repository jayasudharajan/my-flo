aws {
  config-bucket = ${?AWS_CONFIG_BUCKET}
}

db-context {
  dataSourceClassName=org.postgresql.ds.PGSimpleDataSource
  dataSource.user=${DB_USER}
  dataSource.password=${DB_PASSWORD}
  dataSource.databaseName=${DB_NAME}
  dataSource.portNumber=${DB_PORT}
  dataSource.serverName=${DB_HOST}
  connectionTimeout=10000
}

mqtt {
  broker = ${?MQTT_BROKER},
  qos = 2,
  client-id = "notification-api",
  ssl-configuration {
    client-cert = ${?MQTT_CLIENT_CERT},
    client-key = ${?MQTT_CLIENT_KEY},
    broker-ca-certificate = ${?MQTT_CA_CERTIFICATE}
  }
}

kafka {
  host = ${KAFKA_HOST}
  incident-topic = ${KAFKA_TOPIC}
  entity-activity-topic = ${KAFKA_ENTITY_ACTIVITY_TOPIC}
}

redis {
  host = ${REDIS_HOST}
  port = 6379
  port = ${?REDIS_PORT}
}

finatra {
  httpsPort = 9998
  httpPort = 9999
}

flo {
  public-gateway {
    url = ${FLO_PUBLIC_GATEWAY_URL}
  }
  api {
    url = ${FLO_API_URL}
  }
  fire-writer {
    url = ${FLO_FIRE_WRITER_URL}
  }
}

akka {
  http {
    host-connection-pool {
      max-open-requests = 128
      idle-timeout = 5s
      client {
        connecting-timeout = 1s
        idle-timeout = 5s
      }
    }
  }
}

twilio {
  customer-care-phone-number = ${CUSTOMER_CARE_PHONE_NUMBER}
}

api {
  randomize-feedback-flow-options = false
  randomize-feedback-flow-options = ${?RANDOMIZE_FEEDBACK_FLOW_OPTIONS}

  randomize-user-feedback-options = false
  randomize-user-feedback-options = ${?RANDOMIZE_USER_FEEDBACK_OPTIONS}
}