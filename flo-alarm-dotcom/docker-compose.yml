#version: "3.8"

services:
  app:
    image: flo-alarm-dotcom:local
    ports:
      - "8080:8080"
    environment:
      APPLICATION_NAME: "flo-alarm-dotcom"
      FLO_API_URL: "https://api-dev.flocloud.co"
      FLO_API_JWT: "Bearer fake.access.token"
      FLO_HTTP_PORT: 8080
      FLO_KAFKA_CN: "kafka:9092"
      FLO_KAFKA_GROUP_ID: "flo-alarm-dotcom-local"
      FLO_KAFKA_TOPIC_ENTITY_ACTIVITY: "entity-activity-v1"
      FLO_KAFKA_TOPIC_VALVE_STATE: "valve-state-v1"
      FLO_LOCAL_DEBUG: "true"
      FLO_LOG_MIN_LEVEL: 1
      FLO_REDIS_CN: "redis:6379"
      FLO_PGDB_CN: "host=postgres port=5432 user=postgres password=pwd dbname=postgres sslmode=disable"
    volumes:
      - "./src:/src"
    build:
      context: .
      dockerfile: ./Dockerfile.build
      args:
        CI_COMMIT_SHA: "${CI_COMMIT_SHA:-none}"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_healthy
    links:
      - postgres
      - redis
      - kafka

  postgres:
    #image: postgres:latest
    image: bitnami/postgresql:13
    #CONNECT w/ local client: pgcli -h localhost -U postgres
    ports:
      - "5432:5432"
    #NOTE: schema bootstrap only happens if ./db/tmp/postgres is missing!
    volumes:
      - "./db/schema:/docker-entrypoint-initdb.d"
      - "./db/tmp/postgres:/bitnami/postgresql"
    environment:
      POSTGRESQL_USERNAME: "postgres"
      POSTGRESQL_DATABASE: "postgres"
      POSTGRESQL_PASSWORD: "pwd"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres -h localhost -p 5432" ]
      interval: 3s
      timeout: 1s
      retries: 10

  redis:
    image: bitnami/redis:6.2
    restart: on-failure
    #CONNECT w/ local client (psql can be used instead of redis-cli also): redis-cli -u redis://localhost:6379
    ports:
      - "6379:6379"
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 3s
      timeout: 1s
      retries: 10
    logging:
      driver: none

  zookeeper:
    image: "bitnami/zookeeper:3"
    restart: on-failure
    ports:
      - "2181:2181"
    volumes:
      - "./db/tmp/zookeeper:/bitnami/zookeeper"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    logging:
      driver: none

  #NOTE: both zookeeper & kafka username & pwd are: user & bitnami
  kafka:
    image: "bitnami/kafka:2"
    #CONNECT tail w/ local client (run 2x, 1st run will mk topic): kafkacat -C -b localhost:29092 -t 'entity-activity-v1' -q
    #push dummy data w/ local client: echo '{"client_app_name":"kafcat"}' | kafkacat -P -b localhost:29092 -t 'entity-activity-v1'
    ports:
      #NOTE: port 9092 only works from within docker network: alarm-dotcom (where dns names are correct for 'kafka' entry). Use 29092 to connect from host
      - "29092:29092"
    volumes:
      - "./db/tmp/kafka:/bitnami/kafka"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      zookeeper:
        condition: service_started
    links:
      - zookeeper
    logging:
      driver: none

  #NOTE: this service will push a single message to topic 'entity-activity-v1' and will stop if successful
  kafka_bootstrap_ent:
    image: confluentinc/cp-kafkacat
    restart: on-failure
    command: "kafkacat -P -b kafka:9092 -t 'entity-activity-v1' -l /test/entity-activity-v1.msg.json"
    volumes:
      - "./test:/test"
    depends_on:
      kafka:
        condition: service_started
    links:
      - kafka

  kafka_bootstrap_hb:
    image: confluentinc/cp-kafkacat
    restart: on-failure
    command: "kafkacat -P -b kafka:9092 -t 'device-heartbeat-status' -l /test/device-heartbeat-status.msg.json"
    volumes:
      - "./test:/test"
    depends_on:
      kafka:
        condition: service_started
    links:
      - kafka