// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-11-22 14:07:44.599943 -0800 PST m=+0.036578645

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Alexander Galushka",
            "email": "alex.galushka@flotechnologies.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/device/{id}": {
            "get": {
                "description": "get device by id (device mac address), device state includes itself: isConnected flag, providing the\nknowledge about the device online state (connected or disconnected from the network), firmware properties\npassed from the device (the list of the properties is lengthy and is still growing), keep in mind that\nthere is no validation on the firmware properties in the device service (it takes the data as is from the device)\nsytem mode, valve state and telemetry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "get device state by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "device id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.DeviceExtended"
                            }
                        }
                    },
                    "400": {
                        "description": "path parameter id can not be empty",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "deviceId_f045da2cc1ed doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to retrieve record for deviceId_000005f0cccc from the datastore",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "delete device by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "DeviceBase Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.DeviceBase"
                            }
                        }
                    },
                    "400": {
                        "description": "parameter id can not be empty",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "deviceId_f045da2cc1ed doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to delete device props from the SQL datastore\" \"failed to delete device props from the NOSQL datastore",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/device/{id}/sync": {
            "post": {
                "description": "forces the device to sync with the backend services, providing the latest data for for System Mode,\nValve State, Firmware Properties",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "forces the device to sync",
                "parameters": [
                    {
                        "type": "string",
                        "description": "device id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {},
                    "400": {
                        "description": "path parameter id can not be empty",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "deviceId_f045da2cc1ed doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/devices": {
            "get": {
                "description": "get devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "List devices",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "the limit parameter controls the maximum number of items that may be returned for a single request, default as well as max value is 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "the offset parameter controls the starting point within the collection of resource results, default values is 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Devices"
                            }
                        }
                    },
                    "400": {
                        "description": "parameter limit has to be a number\" \"parameter offset has to be a number",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to retrieve devices records with offset 0 and limit 10",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/devices/{id}/actionRules": {
            "get": {
                "description": "Retrieves Action Rules for the given Device ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "Retrieves Action Rules for the given Device ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "device id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.ActionRules"
                        }
                    },
                    "500": {
                        "description": "failed to retrieve action rules",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Upserts Action Rules for the given Device ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "Upserts Action Rules for the given Device ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "device id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Action Rules",
                        "name": "actionRules",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ActionRules"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.ActionRules"
                        }
                    },
                    "500": {
                        "description": "failed to upsert action rules",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/devices/{id}/actionRules/{actionRuleId}": {
            "delete": {
                "description": "Deletes Action Rules for the given Device ID and Action Rule ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "Deletes Action Rules for the given Device ID and Action Rule ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "device id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.ActionRule"
                        }
                    },
                    "500": {
                        "description": "failed to delete action rule",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/devices/{id}/fwproperties": {
            "post": {
                "description": "updates device firmware properties",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "updates device firmware properties, you can update any fields in model",
                "parameters": [
                    {
                        "description": "Update device firmware properties",
                        "name": "device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/map%5Bstring%5Dinterface%7B%7D"
                        }
                    }
                ],
                "responses": {
                    "202": {},
                    "400": {
                        "description": "failed to marshal device fw props setter",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/firestore/auth": {
            "post": {
                "description": "generates custom JWT token to authenticate clients with Firestore limiting access to specified asset ids\nit is achieved by passing the ids of customer's asset such as devices in the request body which is going to be baked in as a custom claim \"ids\" into the jwt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices",
                    "firestore"
                ],
                "summary": "generates custom JWT token to authenticate clients with Firestore",
                "parameters": [
                    {
                        "description": "specifies the devices ids client has access to",
                        "name": "firestoreAuth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/FirestoreAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.FirestoreToken"
                        }
                    },
                    "400": {
                        "description": "parameter ids has to be a string\" \"parameter ids can not be empty",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to generate firestore jwt",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "get devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "check the health status of the service and list its config data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Ping"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ActionRule": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "event": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "targetDeviceId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "main.ActionRules": {
            "type": "object",
            "properties": {
                "actionRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.ActionRule"
                    }
                }
            }
        },
        "main.DeviceBase": {
            "type": "object",
            "properties": {
                "createdTime": {
                    "type": "string",
                    "example": "2019-05-03T22:30:15.82285Z"
                },
                "deviceId": {
                    "type": "string",
                    "example": "000005f0cccc"
                },
                "floSense": {
                    "type": "object"
                },
                "fwProperties": {
                    "type": "object"
                },
                "fwVersion": {
                    "type": "string",
                    "example": "3.5.12"
                },
                "isConnected": {
                    "type": "boolean",
                    "example": true
                },
                "lastHeardFromTime": {
                    "type": "string",
                    "example": "2019-05-06T07:14:36Z"
                },
                "updatedTime": {
                    "type": "string",
                    "example": "2019-05-06T07:14:36Z"
                }
            }
        },
        "main.DeviceExtended": {
            "type": "object",
            "properties": {
                "connectivity": {
                    "type": "object"
                },
                "createdTime": {
                    "type": "string",
                    "example": "2019-05-03T22:30:15.82285Z"
                },
                "deviceId": {
                    "type": "string",
                    "example": "000005f0cccc"
                },
                "floSense": {
                    "type": "object"
                },
                "fwProperties": {
                    "type": "object"
                },
                "fwVersion": {
                    "type": "string",
                    "example": "3.5.12"
                },
                "isConnected": {
                    "type": "boolean",
                    "example": true
                },
                "lastHeardFromTime": {
                    "type": "string",
                    "example": "2019-05-06T07:14:36Z"
                },
                "systemMode": {
                    "type": "object"
                },
                "telemetry": {
                    "type": "object"
                },
                "updatedTime": {
                    "type": "string",
                    "example": "2019-05-06T07:14:36Z"
                },
                "valve": {
                    "type": "object"
                }
            }
        },
        "main.Devices": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.DeviceBase"
                    }
                },
                "meta": {
                    "type": "object",
                    "$ref": "#/definitions/main.Meta"
                }
            }
        },
        "main.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "main.FirestoreToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "tbd"
                }
            }
        },
        "main.Meta": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "total": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "main.Ping": {
            "type": "object",
            "properties": {
                "build_date": {
                    "type": "string",
                    "example": "2019-05-03T18:44:37Z"
                },
                "commit_name": {
                    "type": "string",
                    "example": "cleanup_and_todo"
                },
                "commit_sha": {
                    "type": "string",
                    "example": "b32ecf837b64055626a7403c15c8fb8195f4197a"
                },
                "env": {
                    "type": "string",
                    "example": "dev"
                },
                "service_name": {
                    "type": "string",
                    "example": "flo-device-service"
                },
                "stats": {
                    "type": "object"
                },
                "timestamp": {
                    "type": "string",
                    "example": "flo-device-service"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "flo-device-service.flocloud.co",
	BasePath:    "/v1",
	Schemes:     []string{"http", "https"},
	Title:       "Device Service API",
	Description: "This is service which takes provides information about FLO devices, its properties and states.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
