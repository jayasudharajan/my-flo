kind: Cluster
apiVersion: kops/v1alpha2
metadata:
  name: {{ .kubernetes.clusterName }}
spec:
  encryptionConfig: true
  channel: "stable"
  configBase: {{ .kubernetes.stateStore }}/{{ .kubernetes.clusterName }}
  cloudProvider: "aws"
  kubernetesVersion: "1.12.8"
  kubelet:
    kubeletCgroups: "/systemd/system.slice"
    runtimeCgroups: "/systemd/system.slice"
  masterKubelet:
    kubeletCgroups: "/systemd/system.slice"
    runtimeCgroups: "/systemd/system.slice"
  subnets:
  {{- range $idx, $subnet := .subnets }}
  - name: {{ $subnet.name }}
    zone: {{ $subnet.zone }}
    cidr: {{ $subnet.cidr }}
    type: {{ $subnet.type }}
    id:   {{ $subnet.id }}
  {{- end }}
  masterPublicName: api.{{ .kubernetes.clusterName }}
  masterInternalName: api.internal.{{ .kubernetes.clusterName }}
  networkCIDR: {{ .aws.cidrBlock }}
  networkID: {{ .aws.vpcId }}
  additionalPolicies:
    node: |
      [
        {
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:us-east-2:098786959887:function:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeTags",
            "autoscaling:TerminateInstanceInAutoScalingGroup"
          ],
          "Resource": [
            "arn:aws:autoscaling:us-east-2:098786959887:autoScalingGroup:efabd972-23c2-4807-be58-56d4e0b02f91:autoScalingGroupName/nodes.k8s.flocloud.co"
          ]
        },
        {
          "Action": [
              "s3:Get*",
              "s3:List*",
              "s3:Put*",
              "s3:Delete*"
          ],
          "Resource": [
              "arn:aws:s3:::flocloud-devices/*"
          ],
          "Effect": "Allow"
        },
        {
          "Action": [
              "dynamodb:GetItem",
              "dynamodb:BatchGetItem",
              "dynamodb:BatchWriteItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem",
              "dynamodb:Query",
              "dynamodb:Scan"
          ],
          "Resource": "arn:aws:dynamodb:us-east-2:098786959887:table/*",
          "Effect": "Allow"
        },
        {
            "Action": [
                "ecr:*",
                "ecs:*",
                "ssm:*",
                "sns:*",
                "sqs:*"
            ],
            "Resource": "*",
            "Effect": "Allow"
        },
        {
            "Action": [
                "ecr:GetAuthorizationToken"
            ],
            "Resource": "*",
            "Effect": "Allow"
        },
        {
            "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability"
            ],
            "Resource": [
              "arn:aws:ecr:us-east-2:098786959887:repository/flo-email-reports-generator",
              "arn:aws:ecr:us-east-2:098786959887:repository/flo-email-service"
            ],
            "Effect": "Allow"
        },
        {
          "Action": [
              "ecs:CreateCluster",
              "ecs:DescribeTasks",
              "ecs:DeregisterContainerInstance",
              "ecs:DiscoverPollEndpoint",
              "ecs:DescribeContainerInstances",
              "ecs:Poll",
              "ecs:RegisterContainerInstance",
              "ecs:StartTelemetrySession",
              "ecs:Submit*",
              "ecs:StartTask",
              "ecs:StopTask"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
            "Action": [
                "s3:ListBucket"
            ],
            "Resource": [
                "arn:aws:s3:::flocloud-config",
                "arn:aws:s3:::flocloud-devices"
            ],
            "Effect": "Allow"
        },
        {
          "Action": [
              "s3:Get*",
              "s3:List*"
          ],
          "Resource": [
              "arn:aws:s3:::flocloud-config/docker/*",
              "arn:aws:s3:::flocloud-config/filebeat/*",
              "arn:aws:s3:::flocloud-config/hivemq4/dev/*"
          ],
          "Effect": "Allow"
        },
        {
            "Action": [
                "s3:DeleteObject*",
                "s3:GetObject*",
                "s3:PutObject*",
                "s3:List*"
            ],
            "Resource": [
                "arn:aws:s3:::flocloud-flosense-models",
                "arn:aws:s3:::flocloud-flosense-models/*"
            ],
            "Effect": "Allow"
        },
        {
            "Action": [
                "s3:GetObject"
            ],
            "Resource": [
                "arn:aws:s3:::flocloud-config/flo-apps/flo-api/dev/mqtt-client-certs/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-ca/dev/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-directive-response/dev/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-directive-router/dev/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-directive-router/mqtt-client-certs/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-email-reports-generator/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-encryption/kafka/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-encryption/dev/kafka/*",
                "arn:aws:s3:::flocloud-config/flo-apps/flo-kafka-tls/*",
                "arn:aws:s3:::flocloud-devices/dev/devices/device-*/qrcode/*.svg",
                "arn:aws:s3:::flocloud-devices/dev/devices/device-*/qrcode/*.png",
                "arn:aws:s3:::flocloud-letters/*.pdf"
            ],
            "Effect": "Allow"
        },
        {
            "Effect": "Allow",
            "Action": [
                "kms:Decrypt",
                "secretsmanager:GetSecretValue"
            ],
            "Resource": [
                "arn:aws:secretsmanager:us-east-2:098786959887:secret:/dev/apps/flo-email-reports-generator/docker-auth",
                "arn:aws:kms:us-east-2:098786959887:alias/aws/secretsmanager"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:DescribeKey"
            ],
            "Resource": [
                "arn:aws:kms:us-east-2:098786959887:key/*"
            ]
        },
        {
            "Action": [
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:Scan"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:dynamodb:us-east-2:098786959887:table/*"
        }
      ]
  topology:
    masters: private
    nodes: private
    bastion:
      bastionPublicName: bastion.{{ .kubernetes.clusterName }}
    dns:
      type: Public
  nonMasqueradeCIDR: "100.64.0.0/10"
  sshAccess:
  {{- range $idx, $ip := .kubernetes.allowedIps }}
  - {{ $ip | quote }}
  {{- end }}
  kubernetesApiAccess:
  {{- range $idx, $ip := .kubernetes.allowedIps }}
  - {{ $ip | quote }}
  {{- end }}
  etcdClusters:
  - name: main
    version: "3.2.18"
    etcdMembers:
    {{- range $idx, $master := .kubernetes.masters }}
    - name: {{ $master.name }}
      instanceGroup: {{ $master.instanceGroup }}
      encryptedVolume: true
    {{- end }}
  - name: events
    version: "3.2.18"
    etcdMembers:
    {{- range $idx, $master := .kubernetes.masters }}
    - name: {{ $master.name }}
      instanceGroup: {{ $master.instanceGroup }}
      encryptedVolume: true
    {{- end }}
  kubeAPIServer:
    admissionControl:
    - "NamespaceLifecycle"
    - "LimitRanger"
    - "ServiceAccount"
    - "PersistentVolumeLabel"
    - "DefaultStorageClass"
    - "DefaultTolerationSeconds"
    - "MutatingAdmissionWebhook"
    - "ValidatingAdmissionWebhook"
    - "ResourceQuota"
    - "NodeRestriction"
    - "Priority"
  networking:
    calico: {}
  api:
    loadBalancer:
      type: Public
  authorization:
    rbac: {}
  cloudLabels:
    Deployment: {{ .global.deployment | quote }}
    DeploymentCode: {{ .global.deploymentCode | quote }}
    Project: {{ .global.project | quote }}
    KubernetesCluster: {{ .kubernetes.clusterName | quote }}
    k8s.io/cluster-autoscaler/enabled: "true"
    kubernetes.io/cluster/{{ .kubernetes.clusterName }}: "owned"
  iam:
    legacy: false
    allowContainerRegistry: true
