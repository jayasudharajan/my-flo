---
# Source: consul/templates/pod-dist-budget.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "release-name-consul-pdb"
  labels:
    heritage: "Tiller"
    release: "release-name"
    chart: consul-3.9.4
    component: "release-name-consul"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: "release-name-consul"

---
# Source: consul/templates/gossip-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: release-name-consul-gossip-key
  labels:
    heritage: "Tiller"
    release: "release-name"
    chart: consul-3.9.4
    component: "release-name-consul"
type: Opaque
data:
  
  gossip-key: WTlnNjNrd3ltSmNjRUtQcko3SVVvc0tH
  


---
# Source: consul/templates/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-consul-tests
data:
  run.sh: |-
    @test "Testing Consul cluster has quorum" {
      for i in {0..2}; do
        for n in {1..30}; do
          if [ `kubectl exec release-name-consul-$i consul members --namespace=consul | grep server | wc -l` -ge "3" ]; then
            echo "release-name-consul-$i OK. consul members returning at least 3 records."
            break
          else
            echo "release-name-consul-$i ERROR. consul members returning less than 3 records."
          fi

          if [ "$n" -ge "30" ]; then
            echo "Failed $n times to get members from release-name-consul-$i"
            exit 1
          fi
          sleep 10
        done
      done
    }

---
# Source: consul/templates/consul-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-consul"
  labels:
    heritage: "Tiller"
    release: "release-name"
    chart: consul-3.9.4
    component: "release-name-consul"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: http
    port: 8500
  - name: rpc
    port: 8400
  - name: serflan-tcp
    protocol: "TCP"
    port: 8301
  - name: serflan-udp
    protocol: "UDP"
    port: 8301
  - name: serfwan-tcp
    protocol: "TCP"
    port: 8302
  - name: serfwan-udp
    protocol: "UDP"
    port: 8302
  - name: server
    port: 8300
  - name: consuldns-tcp
    port: 8600
  - name: consuldns-udp
    protocol: "UDP"
    port: 8600
  clusterIP: None
  selector:
    component: "release-name-consul"

---
# Source: consul/templates/ui-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: "release-name-consul-ui"
  labels:
    heritage: "Tiller"
    release: "release-name"
    chart: consul-3.9.4
    component: "release-name-consul"
spec:
  ports:
  - name: http
    port: 8500
  selector:
    component: "release-name-consul"
  type: "NodePort"

---
# Source: consul/templates/consul-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-ui-test-qe0xt"
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: test-framework
      image: dduportal/bats:0.4.0
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: release-name-ui-test
      image: lachlanevenson/k8s-kubectl:v1.4.8-bash
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: release-name-consul-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never

---
# Source: consul/templates/consul-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "release-name-consul"
  labels:
    heritage: "Tiller"
    release: "release-name"
    chart: consul-3.9.4
    component: "release-name-consul"
spec:
  serviceName: "release-name-consul"
  replicas: 5
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: "release-name"
      component: "release-name-consul"
  template:
    metadata:
      name: "release-name-consul"
      labels:
        heritage: "Tiller"
        release: "release-name"
        chart: consul-3.9.4
        component: "release-name-consul"
    spec:
      securityContext:
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - "release-name-consul"
        
      nodeSelector:
        kops.k8s.io/instancegroup: nodes
        
      containers:
      - name: "release-name-consul"
        image: "consul:1.5.3"
        imagePullPolicy: "Always"
        ports:
        - name: http
          containerPort: 8500
        - name: rpc
          containerPort: 8400
        - name: serflan-tcp
          protocol: "TCP"
          containerPort: 8301
        - name: serflan-udp
          protocol: "UDP"
          containerPort: 8301
        - name: serfwan-tcp
          protocol: "TCP"
          containerPort: 8302
        - name: serfwan-udp
          protocol: "UDP"
          containerPort: 8302
        - name: server
          containerPort: 8300
        - name: consuldns-tcp
          containerPort: 8600
        - name: consuldns-udp
          protocol: "UDP"
          containerPort: 8600
        resources:
          {}
          
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: "5"
        - name: STATEFULSET_NAME
          value: "release-name-consul"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: STATEFULSET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DNSPORT
          value: "8600"
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/consul
        - name: gossip-key
          mountPath: /etc/consul/secrets
          readOnly: true
        
        livenessProbe:
          exec:
            command:
            - consul
            - members
            - -http-addr=http://127.0.0.1:8500
          initialDelaySeconds: 300
          timeoutSeconds: 5
        command:
          - "/bin/sh"
          - "-ec"
          - |
            set -o pipefail

            if [ -z "$POD_IP"  ]; then
              POD_IP=$(hostname -i)
            fi
            FQDN_SUFFIX="${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc"
            NODE_NAME="$(hostname -s).${FQDN_SUFFIX}"
            if [ -e /etc/consul/secrets/gossip-key ]; then
              echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
              GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
            fi

            JOIN_PEERS=""
            JOIN_PEERS=""
            for i in $( seq 0 $((${INITIAL_CLUSTER_SIZE} - 1)) ); do
              JOIN_PEERS="${JOIN_PEERS}${JOIN_PEERS:+ }${STATEFULSET_NAME}-${i}.${FQDN_SUFFIX}"
            done

            JOIN_PEERS=$( printf "%s\n" $JOIN_PEERS | sort | uniq )

            # Require multiple loops in the case of unstable DNS resolution
            SUCCESS_LOOPS=5
            while [ "$SUCCESS_LOOPS" -gt 0 ]; do
              ALL_READY=true
              JOIN_LAN=""
              for THIS_PEER in $JOIN_PEERS; do
                  # Make sure we can resolve hostname and ping IP
                  if PEER_IP="$(ping -c 1 $THIS_PEER | awk -F'[()]' '/PING/{print $2}')" && [ "$PEER_IP" != "" ]; then
                    if [ "${PEER_IP}" != "${POD_IP}" ]; then
                      JOIN_LAN="${JOIN_LAN}${JOIN_LAN:+ } -retry-join=$THIS_PEER"
                    fi
                  else
                    ALL_READY=false
                    break
                  fi
              done
              if $ALL_READY; then
                SUCCESS_LOOPS=$(( SUCCESS_LOOPS - 1 ))
                echo "LAN peers appear ready, $SUCCESS_LOOPS verifications left"
              else
                echo "Waiting for LAN peer $THIS_PEER..."
              fi
              sleep 1s
            done


            WAN_PEERS=""

            JOIN_WAN=""
            SUCCESS_LOOPS=5
            while [ "$WAN_PEERS" != "" ] && [ "$SUCCESS_LOOPS" -gt 0 ]; do
              ALL_READY=true
              JOIN_WAN=""
              for THIS_PEER in $WAN_PEERS; do
                  # We don't care if we can ping the peer, but we do care that we can get its IP
                  if PEER_IP="$( ( ping -c 1 $THIS_PEER || true ) | awk -F'[()]' '/PING/{print $2}')" && [ "$PEER_IP" != "" ]; then
                    if [ "${PEER_IP}" != "${POD_IP}" ]; then
                      JOIN_WAN="${JOIN_WAN}${JOIN_WAN:+ } -retry-join-wan=$THIS_PEER"
                    fi
                  else
                    ALL_READY=false
                    break
                  fi
              done
              if $ALL_READY; then
                SUCCESS_LOOPS=$(( SUCCESS_LOOPS - 1 ))
                echo "WAN peers appear ready, $SUCCESS_LOOPS verifications left"
              else
                echo "Waiting for WAN peer $THIS_PEER..."
              fi
              sleep 1s
            done

            exec /bin/consul agent \
              -ui \
              -domain=consul \
              -data-dir=/var/lib/consul \
              -server \
              -bootstrap-expect=$( echo "$JOIN_PEERS" | wc -w ) \
              -disable-keyring-file \
              -bind=0.0.0.0 \
              -advertise=${POD_IP} \
              ${JOIN_LAN} \
              ${JOIN_WAN} \
              ${GOSSIP_KEY} \
              -client=0.0.0.0 \
              -dns-port=${DNSPORT} \
              -http-port=8500
      volumes:
      - name: gossip-key
        secret:
          secretName: release-name-consul-gossip-key
      
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          # upstream recommended max is 700M
          storage: "5Gi"
      storageClassName: "gp2"

---
# Source: consul/templates/basic-acls.yaml

---
# Source: consul/templates/consul-ingress.yaml


---
# Source: consul/templates/consul-test-clusterrole.yaml


---
# Source: consul/templates/consul-test-clusterrolebinding.yaml


---
# Source: consul/templates/consul-test-serviceaccount.yaml


