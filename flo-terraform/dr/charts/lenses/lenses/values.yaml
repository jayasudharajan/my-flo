### TO DEPLOY SQL RUNNERS IN THE CLUSTER
### FROM LENSES YOU NEED TO PATCH THE SERVICE ACCOUNT
### LENSES WILL USE TO DEPLOY. SEE:
### https://docs.lenses.io/install_setup/deployment-options/kubernetes-deployment.html

# Basic info
replicaCount: 1

image:
  repository: landoop/lenses
  pullPolicy: IfNotPresent

# Monitoring
monitoring:
  pipeline: lenses
  enabled: true
  port: 9102
  path: "/metrics"

# Resource management
resources:
  limits:
    memory: 5Gi
  requests:
    memory: 4Gi

# rbacEnable indicates if a the cluster has rbac enabled and a cluster role
# and rolebinding should be created for the service account
rbacEnable: true

# restPort is the Lenses rest port
restPort: 3030
servicePort: 80

# serviceAccount is the Service account to be used by Lenses to deploy apps
serviceAccount: default

# If you use Data Policies module enable a Persistent Volume to keep your data policies rule.
persistence:
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 5Gi
  # set to true to use you own Persistent volume claim
  existingClaim: false

  ## Policies data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

#service
service:
  enabled: true
  type: ClusterIP
  annotations: {}

  ## Load balancer IP address
  ## Is not required, but allows for static address with
  ## serviceType LoadBalancer.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerIP: 130.211.x.x

  ## This will restrict traffic through the cloud-provider load-balancer
  ## to the specified client IPs.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerSourceRanges:
  #   - 0.0.0.0/0

ingress:
  ## If true, Ingress will be created
  ##
  enabled: false
  host:

  # Ingress annotations
  annotations:
    kubernetes.io/ingress.class: traefik
#    kubernetes.io/ingress.class: nginx
#    kubernetes.io/tls-acme: 'true'
#    nginx.ingress.kubernetes.io/rewrite-target: /

  # TLS if enabled load the tls.crt and tls.keys as a secrets and enable TLS on the ingress
  tls:
    enabled: false
    crt: |-
    key: |-

lenses:
  jvm:
    # heapOpts are any overrides for Lenses Heap JVM options
    heapOpts: |-
    # logBackOpts are any logging options
    logBackOpts:
    #performanceOpts are any jvm tuning options to add to the jvm
    performanceOpts:

  # broker details
  ## Brokers should be behind a service, if so set one entry in the hosts
  ## If your brokers are outside explicitly add them to the hosts. Note you only need one to bootstrap
  ## but you should specify more than one for resilience

  # kafka ssl
  # The keytab, key and truststores file data are the base64 encoded contents of the files. YOU MUST PROVIDE THE DATA BASE64 encoded
  # openssl base64 < client.keystore.jks | tr -d '\n'
  # The passwords will be base64enc by the secret
  # and added to the kafka secret and mounted into /mnt/secrets
  kafka:
    ssl:
      enabled: false
      # base64 encoded truststore data
      trustStoreFileData: |-

      # base64 encoded keystore data
      keyStoreFileData: |-

      # password strings
      trustStorePassword:
      keyStorePassword:
      keyPassword:
    sasl:
      enabled: false
      # keyTabData is the base64 contents kerberos keytab file is using kerberos mounted in /mnt/secrets
      # openssl base64 < keytab | tr -d '\n'
      keyTabData: |-

      # jaasFileData is the contents of the kafka jaas file mounted in /mnt/secrets
      jaasFileData: |-

      # mechanism is the sasl authentication mechanism GSSAPI, SCRAM or PLAIN
      mechanism: GSSAPI

      # krb5Conf is the kerberos config data to be mounted into /etc
      krb5Conf: |-
    # JMX/JOLOKIA Metrics
    # metrics:
    #   type: "JMX"
    #   port: 9102
    #   username:
    #   password:
    #   ssl:
    bootstrapServers:
      - name: kafka
        port: 9092
        sslPort: 9093
        saslSslPort: 9094
        saslPlainTextPort: 9095

  # zookeeper
  ## Zookeepers should be behind a service, if so set one entry in the hosts
  ## If your zookeepers are outside explicitly add them to the hosts. 
  zookeepers:
    enabled: false
    chroot:
    hosts:
      - host: zookeeper
        port: 2181
        # JMX/JOLOKIA Metrics
        # metrics:
        #   type: "JMX"
        #   port: 9102
        #   username:
        #   password:
        #   ssl:

  # schemaRegistries
  ## Schema registries should be behind a service, if so set one entry in the hosts
  ## If your schema registries are outside explicitly add them to the hosts.
  schemaRegistries:
    enabled: true
    mode:
    hosts:
      - host: schema-registry
        protocol: http
        port: 8081
        # If your schema registry accepts request in a path eg. <url>:<port>/api/v1
        path:
        # JMX/JOLOKIA Metrics
        # metrics:
        #   type: "JMX"
        #   port: 9102
        #   username:
        #   password:
        #   ssl:
    security:
      enabled: false
      authType:
      username:
      password:
      kerberos:
        enabled: false
        # the kerberos principal <name>@<KDC-REALM>
        principal:
        # the service name HTTP@<service-url>
        serviceName:
        # keyTabData is the base64 contents kerberos keytab file is using kerberos mounted in /mnt/secrets
        # openssl base64 < keytab | tr -d '\n'
        keytabData: |-
        # jaasFileData is the contents of the kafka jaas file mounted in /mnt/secrets
        jaasFileData: |-

  connectClusters:
    enabled: true
    clusters:
      - name: streamreactor
        port: 8083
        jmxPort: 9102
        protocol: http
        offsetsTopic: connect-offsets
        statusTopic: connect-status
        configTopic: connect-configs
        authType:
        username:
        password:
        hosts:
          - host: connect-worker-1
            # JMX/JOLOKIA Metrics
            # metrics:
            #   type: "JMX"
            #   port: 9102
            #   username:
            #   password:
            #   ssl:
          - host: connect-worker-2
          - host: connect-worker-3

  # sql
  sql:
#    processorImage: eu.gcr.io/lenses-container-registry/lenses-sql-processor
#    processorImageTag: 2.3
    mode: IN_PROC
    heap: 1024M
    memLimit: 1152M
    memRequest: 128M
    # If Lenses is ssl or sasl Lenses will create a secret from the contents below and it will be mounted into the runners
    # This data is mounted into /mnt/secrets/processors for Lenses to read
    # trustStoreFileData and keyStoreFileData is the base64 encoded contents of the jks files
    # openssl base64 < client.keystore.jks | tr -d '\n'
    ssl:
      trustStoreFileData: |-

      keyStoreFileData: |-

      trustStorePassword:
      keyStorePassword:
      keyPassword:

    sasl:
      # keyTabData is the base64 contents kerberos keytab file is using kerberos mounted in /mnt/secrets/processors
      # openssl base64 < keytab | tr -d '\n'
      keyTabData: |-

      # jaasFileData is the contents of the kafka jaas file mounted in /mnt/secrets/processors
      jaasFileData: |-

      # mechanism is the sasl authentication mechanism GSSAPI, SCRAM or PLAIN
      mechanism: GSSAPI

      # krb5Conf is the kerberos config data to be mounted into /mnt/secrets/processors
      krb5Conf: |-

  # alerts
  alerts:
    enabled: true
    consumersLagThreshold: 50000

    # The alert plugins to integrate with Lenses
    plugins:
      # Example
      # - class: "io.lenses.alerts.plugin.slack.SlackAlertsPlugin"
      #   config: |
      #     {
      #       webhook-url="https://your-slack-webhook-url
      #       username=Lensesâ„¢
      #       channel=lenses-slack-test
      #     }
      # - class: "io.lenses.alerts.plugin.am.AlertManagerPlugin"
      #   config: |
      #     {
      #       endpoints="http://your-alert-manager-url"
      #       source=PROD
      #       generator-url="http://lenses_prod:port1"
      #     }



  #grafana
  grafanaUrl:

  # topics
  topics:
      # suffix to add to lenses system topics, for example if you are running more than one Lenses on the same kafka cluster
    suffix:

  security:
    # Change Default Lenses user credentials.
    # Username: admin / Password:admin
    defaultUser:
    # Example
    #  username: admin
    #  password: admin

    kerberos:
      enabled: false
      principal:
      keytabData: |-

      debug: false

     # ldap setting
    ldap:
      enabled: false
      url: ""
      base: ""
      password: ""
      user: ""
      filter: ""

      # ldap plugins
      plugin:
        class: "io.lenses.security.ldap.LdapMemberOfUserGroupPlugin"
        memberofKey: ""
        groupExtractRegex: ""
        personNameKey: ""


  # license is the Lenses license
  license: |-

  # licenseUrl is a url pointing to the Lenses license
  licenseUrl:

  # extra configurations that will be append to the lenses.conf file mounted in /mnt/settings
  ## keys must be uppercase and underscores for separators suit for use as environment variables
  ## see https://docs.lenses.io/install_setup/configuration/lenses-config.html#option-reference
  configOverrides: {}
    #LENSES_PROPERTY : value
