---
# Source: lenses/templates/secrets.yaml
kind: Secret
apiVersion: v1
metadata:
  name: release-name
  labels:
    app: release-name
    chart: "lenses-3.0.1"
    release: "release-name"
    heritage: "Tiller"
    lenses.io/app: "release-name"
    lenses.io/app.type: lenses-secret
data:
  client.truststore.jks: |-
    
  client.keystore.jks: |-
    
  processor.client.truststore.jks: |-
    
  processor.client.keystore.jks: |-
    
  keytab: |-
    
  processor.keytab: |-
    
  lenses.keytab: |-
    
  registry.keytab: |-
    
stringData:
  connect.clusters: |-
    [{
        name: "kafka_connect_cherry_prod",
        statuses: "connect-status",
        configs: "connect-config",
        offsets: "connect-offsets",
        urls: [
          {url: "http://http://kafka-connect-jolokia.flocloud.co/:80", metrics: {
              url: "http://kafka-connect-jolokia.flocloud.co/:8778",
              type: "JOLOKIAG",
              ssl: false,
            }}
        ]
      }
    ]
  security.conf: |-
    lenses.security.user="flolensesadmin"
    lenses.security.password="8odbugjuFowgOcfeniapjirmopijibto"
  license: "{\"source\":\"Lenses.io Ltd\",\"clientId\":\"992fc374-9399-4993-8b7d-9ee3554ce6d4\",\"details\":\"Lenses\",\"key\":\"eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.P5PeKkpLyTRFXx8j8YWFdSBLo-qF4enehfjbyaL9EORTfqM3IxAyfQ.do1Y9V5QwbRx7cu1swilPQ.1XqbdWQAPo3Gn5Rc77oZnHkRQwqJnGiJorJ8rwYITyzTFpCmNke00W5V1d6VrHmaIqWx7nONrP9JVSLkwwIrtd-omyhe5kD8JWE4-NxEXhvRtaerFkPE2jnwFsoMqEJR0nkfesadqzmdQ7abtryRW0-cPNc21Kjwg_A8LIeZnk8keE9YrIVLETfFxIx-XADdmNJzSERG3Hdk0SnYwDhsXkjxPed085OknOEbKyngB7LGTsn6wbzkmKG-MmEOEMkGBTjY3Fp2a3nD7mX_xqdlNH93rn7Bu_OyMU2Lbvq3dZmEeBuxXvdvGlxrbnpVdPHMIZ67Oq97Dadtd6mmDIDhKnc_INY1MuTu64pKxkVQmIz572oDsVO4hN-zqmNSoEfYRnKBW_QdZnuxgaKBQ2Gntt6SdbZJ6_kWL_PH5ymSU1LU5Kelq4UTG6E8uI2besSrN6-lNhPsPeuM0EoyeOz7T5-cNXOYZI0AtLQh8oQsoHj5IalAJwLzbBtnO7bWIc81XFx-xEm0WTWznwRupeUDLmYe1DVy4KYq5rh1BUJVlEs80Za6nuwCiC5qBTD_PO5_V3YFZ8wpQyYDs4TeutFABR3ymhupE3ZZOLXHVtjAsctXNYkJYj8ZacRiE5Yf93XGprG-5XOLPosRqVteFS4mYL5VMmpAOObQpPHtKr95n8JHIPysdhoG4HfXOlBsOSQbMCG0adEvm1-_dj7oF9ghHVEovP9AgD7V15-XPViOwcQrYhiHQCTHA5ZwWevylpuoPeSifChH7ZrR-WMrBoguvLxZqhnrGJ9B_NHeG747laqfkdZlUS_-RR1YO1MTfVFLWRGoRduMv1Wuha8lsHPrdl6R6zLo7Uet4uKtE5GE9ZdEGq7m9vnX3cgpUW3ljK50rhSgPbwCWEAUm3WhVzRwr0evYECSHqrsRxJb98rzyjO0tXWeeXrPU0yN6qM8aw-kzZ4iVZw-BRWSLcdcU9XhgZHG2xChqeACfEiu8dRB0yl0331qr9XMUHcKv_kXDVPuS_fACWQnkIBCUVPBoq2OiVg5O5jUwain1luF3oFCqOfvuoeYhJs8xOKw5uUc1ftPojeZlaQz4LH1XbEJfA9bjxi5EkQY6HpgzBQ3hcco4N5P7e3lRJWQRkoea2IIu-B2aoC2bri5uKEvokWMK-e5-avtKAsC1NgLK5QDQBCmaTEQwpF2yUVxKoKQEaQxwK8wiqEch4AYQbrnE-4OcLop02sWStnaoM5uRQTr2UaX7KpEj9oz_zPVq2qqOiMaSiUwi5ZOBkRaAJ7dpVKrKxadatbf73GNqHSVFyJNaSAhGQU11Ik2NHXrgKMhz5jv-tIG.sCxhk8pPng4NEi3UEoMEbQ\"}"
  jaas.conf: |-
    
  processor.jaas.conf: |-    
    
  registry.jaas.conf: |-    
    
  client.key.password: "<nil>"
  client.keystore.password: "<nil>"
  client.truststore.password: "<nil>"
  processor.client.key.password: "<nil>"
  processor.client.keystore.password: "<nil>"
  processor.client.truststore.password: "<nil>"
  schema.registry.password: "<nil>"


---
# Source: lenses/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "release-name"
  labels:
    app: "release-name"
    chart: "lenses-3.0.1"
    release: "release-name"
    heritage: "Tiller"
    lenses.io/app: "release-name"
    lenses.io/app.type: lenses-configmap
data:
  krb5.conf: |-
    
  processor.krb5.conf: |-
    
---
# Source: lenses/templates/cluster-role.yaml

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name
  labels:
    app: release-name
    chart: "lenses-3.0.1"
    release: "release-name"
    heritage: "Tiller"
    lenses.io/app: release-name
    lenses.io/app.type: lenses-cluster-role
rules:
- apiGroups: [""]
  resources:
    - namespaces
    - persistentvolumes
    - persistentvolumeclaims
  verbs: 
    - list
    - watch
    - get
    - create
- apiGroups: ["", "extensions", "apps"]
  resources:
    - pods
    - deployments
    - ingresses
    - secrets
    - statefulsets
  verbs: 
    - list
    - watch
    - get
    - update
    - create
    - delete
    - patch
- apiGroups: [""]
  resources:
    - replicasets
  verbs: 
    - list
    - watch
    - get    
- apiGroups: [""]
  resources:
    - events
  verbs: 
    - list
    - watch
    - get

---
# Source: lenses/templates/cluster-role-binding.yaml

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name
  labels:
    app: release-name
    chart: "lenses-3.0.1"
    release: "release-name"
    heritage: "Tiller"
    lenses.io/app: release-name
    lenses.io/app.type: lenses-cluster-role-binding
subjects:
- kind: ServiceAccount
  namespace: lenses
  name: default
roleRef:
  kind: ClusterRole
  name:  release-name
  apiGroup: rbac.authorization.k8s.io

---
# Source: lenses/templates/service.yaml


kind: Service
apiVersion: v1
metadata:
  name: release-name
  labels:
    app: release-name
    chart: lenses-3.0.1
    component: "lenses"
    heritage: Tiller
    release: release-name
    lenses.io/app: release-name
    lenses.io/app.type: lenses-service
spec:
  type: "ClusterIP"
  ports:
  - name: lenses
    port: 80   
    targetPort: 3030
  - name: http-metrics
    port: 9102
  selector:
    app: release-name
    component: "lenses"
---
# Source: lenses/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "release-name"
  labels:
    app: "release-name"
    chart: "lenses-3.0.1"
    release: "release-name"
    heritage: "Tiller"
    component: "lenses"
    lenses.io/app: "release-name"
    lenses.io/app.type: lenses
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: "release-name"
        component: "lenses"
        hostPort: "3030"
        containerPort: "3030"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
        prometheus.io/path: "/metrics"
    spec:
      volumes:             
        - name: secrets
          secret:
            secretName: "release-name"
            items:
              - key: security.conf
                path: security.conf
              - key: lenses.keytab
                path: lenses.keytab 
              - key: keytab
                path: keytab                               
              - key: client.keystore.jks
                path: client.keystore.jks
              - key: client.truststore.jks 
                path: client.truststore.jks
              - key: processor.client.keystore.jks
                path: processor.client.keystore.jks
              - key: processor.client.truststore.jks
                path: processor.client.truststore.jks
              - key: jaas.conf
                path: jaas.conf
              - key: processor.jaas.conf
                path: processor.jaas.conf
              - key: processor.keytab
                path: processor.keytab
              - key: registry.keytab
                path: registry.keytab
        - name: krb
          configMap:
            name: "release-name"
        - name: storage
          persistentVolumeClaim:
            claimName: release-name-claim
      serviceAccountName: default      
      containers:
      - name: lenses
        image: "lensesio/lenses:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3030
        livenessProbe:
          httpGet:
            path: /
            port: 3030
          initialDelaySeconds: 120
          periodSeconds: 3
        volumeMounts:
          - name: secrets
            mountPath: "/mnt/secrets"
          - name: secrets
            mountPath: "/etc/keytab"
            subPath: "keytab"  
          - name: secrets
            mountPath: "/etc/registry.keytab"
            subPath: "registry.keytab"  
          - name: krb
            mountPath: "/etc/krb5.conf"
            subPath: "krb5.conf"
          - name: krb
            mountPath: "/etc/processor.krb5.conf"
            subPath: "processor.krb5.conf"
          - name: storage
            mountPath: "/data/storage"
        resources:
          limits:
            memory: 5Gi
          requests:
            memory: 4Gi
               
        env:
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "release-name"
              key: "license" 
        - name: LENSES_PORT
          value: "3030"
        - name: LENSES_JMX_PORT
          value: "9101"
        - name: LENSES_KAFKA_BROKERS
          value: "PLAINTEXT://kafka-cherry-broker-1.prod.flosecurecloud.com:9092,PLAINTEXT://kafka-cherry-broker-2.prod.flosecurecloud.com:9092,PLAINTEXT://kafka-cherry-broker-3.prod.flosecurecloud.com:9092"
        - name: LENSES_KAFKA_METRICS
          value: |-
            {
              type: "JMX",
              ssl: false,
              default.port: 49999,
            }
        - name: LENSES_ZOOKEEPER_HOSTS
          value: |-
            [
              {url: "kafka-cherry-zk-1.prod.flosecurecloud.com:2181"},
              {url: "kafka-cherry-zk-2.prod.flosecurecloud.com:2181"},
              {url: "kafka-cherry-zk-3.prod.flosecurecloud.com:2181"}
            ]

        # Schema Registries
        - name: LENSES_SCHEMA_REGISTRY_URLS
          value: |-
            
        - name: LENSES_SCHEMA_REGISTRY_MODE
          value: ""
        # from secrets as might contain basic auth credentials
        - name: LENSES_KAFKA_CONNECT_CLUSTERS
          valueFrom:
            secretKeyRef:
              name: "release-name"
              key: "connect.clusters"

        - name: LENSES_ALERT_CONSUMERS_LAG_THRESHOLD
          value: "50000"
        - name: LENSES_ALERT_PLUGINS
          value: |-
            [
              {class: "io.lenses.alerts.plugin.slack.SlackAlertsPlugin", config: {
              webhook-url="https://hooks.slack.com/services/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"
              username=lenses-prod
              channel=alerts
            }
            }
            ]

        # lenses topics      
        - name: LENSES_TOPICS_AUDITS
          value: "_kafka_lenses_audits"
        - name: LENSES_TOPICS_METRICS
          value: "_kafka_lenses_metrics"  
        - name: LENSES_TOPICS_PROFILES
          value: "_kafka_lenses_profiles" 
        - name: LENSES_TOPICS_PROCESSORS
          value: "_kafka_lenses_processors"           
        - name: LENSES_TOPICS_CLUSTER
          value: "_kafka_lenses_cluster" 
        - name: LENSES_TOPICS_ALERTS_STORAGE
          value: "_kafka_lenses_alerts"
        - name: LENSES_TOPICS_ALERTS_SETTINGS
          value: "_kafka_lenses_alert_settings" 
        - name: LENSES_TOPICS_LSQL_STORAGE
          value: "_kafka_lenses_lsql_storage" 
        - name: LENSES_TOPICS_METADATA
          value: "_kafka_lenses_topics_metadata"                                                           
        - name: LENSES_TOPICS_EXTERNAL_TOPOLOGY
          value: "__topology"
          
        # Kubernetes Processors
        - name: LENSES_SQL_EXECUTION_MODE
          value: "IN_PROC"

        # user secrets
        - name: LENSES_SECRET_FILE
          value: "/mnt/secrets/security.conf"
        - name: LENSES_SCHEMA_REGISTRY_AUTH
          value: ""
        - name: LENSES_SCHEMA_REGISTRY_USERNAME
          value: ""
        - name: LENSES_SCHEMA_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "release-name"
              key: "schema.registry.password"
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_BASIC_AUTH_CREDENTIALS_SOURCE
          value: ""
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_BASIC_AUTH_USER_INFO
          value: ""
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_BASIC_AUTH_CREDENTIALS_SOURCE
          value: ""
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_BASIC_AUTH_USER_INFO
          value: ""

        # ssl/sasl
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SECURITY_PROTOCOL
          value: "PLAINTEXT"
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SECURITY_PROTOCOL
          value: "PLAINTEXT"  
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SASL_MECHANISM
          value: "GSSAPI"    
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SASL_MECHANISM
          value: "GSSAPI" 

        # Kubernetes processors

        # extras configs

        - name: LT_PACKAGE
          value: "helm"

        - name: LT_PACKAGE_VERSION
          value: "3.0.1"

---
# Source: lenses/templates/ingress.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name:  release-name
  labels:
    app: release-name
    chart: "lenses-3.0.1"
    component: "lenses"
    heritage: Tiller
    release: release-name
    lenses.io/app: release-name
    lenses.io/app.type: lenses-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx-internal"
spec:
  rules:
  - host: lenses.flosecurecloud.com
    http:
      paths:
      - path: "/"
        backend:
          serviceName: "release-name"
          servicePort: 80
---
# Source: lenses/templates/volume-claim.yaml
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  name: release-name-claim
  labels:
    app: lenses
    chart: "lenses-3.0.1"
    component: "lenses"
    heritage: "Tiller"
    release: "release-name"
    lenses.io/app: lenses
    lenses.io/app.type: lenses-volume-claim
spec:
  accessModes:
    - ReadWriteOnce
    
  resources:
    requests:
      storage: "5Gi"
