---
replicas: 3

# Allows you to add any config files in /usr/share/logstash/config/
# such as logstash.yml and log4j2.properties
#
# Note that when overriding logstash.yml, `http.host: 0.0.0.0` should always be included
# to make default probes work.
logstashConfig:
  logstash.yml: |
    http.host: 0.0.0.0
#  logstash.yml: |
#    key:
#      nestedkey: value
#  log4j2.properties: |
#    key = value

# Allows you to add any pipeline files in /usr/share/logstash/pipeline/
### ***warn*** there is a hardcoded logstash.conf in the image, override it first
logstashPipeline:
  logstash.conf: |
    input {
      beats {
        port => 5044
        ssl => "true"
        ssl_certificate => "/usr/share/logstash/config/certs/logstash.crt"
        ssl_key => "/usr/share/logstash/config/keys/logstash.key"
        ssl_verify_mode => 'none'
      }
    }
  filter-hostname.logstash.conf: |
    filter {
      mutate {
        replace => { "host" => "%{host}" }
      }
    }
  filter-service.logstash.conf: |
    filter {
      mutate {
        replace => { "service" => "%{service}" }
      }
    }
  filter-k8s_apps.logstash.conf: |
    filter {
      if [input][type] == "container" {
        grok {
          patterns_dir => ["/usr/share/logstash/patterns"]
          match => {
            "message" => [
              "(?m)^%{TIMESTAMP_ISO8601:timestamp}\s*%{LOGLEVEL:level} %{GREEDYDATA:log_message}",
              "(?m)^%{TIMESTAMP_GOLANG:timestamp}\s*%{LOGLEVEL:level} %{GREEDYDATA:log_message}"
            ]
          }
        }
      }
    }
  output-flo-logs.logstash.conf: |
    output {
      elasticsearch {
        hosts => ["https://vpc-flo-logs-qrlg5k6lpnwhwxwgit7ah3csum.us-west-2.es.amazonaws.com:443"]
        ssl => true
        # cacert => '/usr/share/logstash/config/ssl/Amazon_Root_CA_1.crt'
        manage_template => true
        http_compression => false
        ilm_enabled => false
        index => "logs-%{+yyyy.MM.dd}"
      }
    }
    # output-s3.logstash.conf: |
    #   output {
    #     if [fields][app] != "" {
    #       s3 {
    #         region => "us-west-2"
    #         bucket => "flosecurecloud-logs"
    #         size_file => 2048
    #         time_file => 5
    #         codec => "plain"
    #         canned_acl => "private"
    #         prefix => "/%{[fields][app]}"
    #       }
    #     } else {
    #       s3 {
    #         region => "us-west-2"
    #         bucket => "flosecurecloud-logs"
    #         size_file => 2048
    #         time_file => 5
    #         codec => "plain"
    #         canned_acl => "private"
    #         prefix => "/other"
    #       }
    #     }

    #   }

# Allows you to add any pattern files in your custom pattern dir
logstashPattern:
  quote.conf: |
    QUOTE (\"|\')
  tsgolang.conf: |
    TIMESTAMP_GOLANG %{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}
  loglevel.conf: |
    LOGLEVEL (E!|W!|I!|D!|[A-a]lert|ALERT|[T|t]race|TRACE|[D|d]ebug|DEBUG|[N|n]otice|NOTICE|[I|i]nfo|INFO|[W|w]arn?(?:ing)?|WARN?(?:ING)?|[E|e]rr?(?:or)?|ERR?(?:OR)?|[C|c]rit?(?:ical)?|CRIT?(?:ICAL)?|[F|f]atal|FATAL|[S|s]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)

logstashPatternDir: "/usr/share/logstash/patterns/"

# Extra environment variables to append to this nodeGroup
# This will be appended to the current 'env:' key. You can use any of the kubernetes env
# syntax here
extraEnvs: []
#  - name: MY_ENVIRONMENT_VAR
#    value: the_value_goes_here

# Allows you to load environment variables from kubernetes secret or config map
envFrom: []
# - secretRef:
#     name: env-secret
# - configMapRef:
#     name: config-map

# Add sensitive data to k8s secrets
# secrets:
#   - name: "tls-cert"
#     value:
#       logstash.crt.filepath: "./logstash-logstash.logstash.server.crt"
#   - name: "tls-key"
#     value:
#       logstash.key.filepath: "./server-key.pem"


# A list of secrets and their paths to mount inside the pod
secretMounts:
  - name: logstash-cert
    secretName: logstash-logstash-tls-cert
    path: /usr/share/logstash/config/certs
  - name: logstash-keys
    secretName: logstash-logstash-tls-key
    path: /usr/share/logstash/config/keys

hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"

image: "docker.elastic.co/logstash/logstash-oss"
imageTag: "7.12.0"
imagePullPolicy: "IfNotPresent"
imagePullSecrets: []

podAnnotations: {}

# additionals labels
labels: {}

logstashJavaOpts: "-Xmx1g -Xms1g"

resources:
  requests:
    cpu: "100m"
    memory: "1536Mi"
  limits:
    cpu: "1000m"
    memory: "1536Mi"

volumeClaimTemplate:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 1Gi

rbac:
  create: false
  serviceAccountAnnotations: {}
  serviceAccountName: ""
  annotations: {}
    #annotation1: "value1"
    #annotation2: "value2"
    #annotation3: "value3"

podSecurityPolicy:
  create: false
  name: ""
  spec:
    privileged: false
    fsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
      - secret
      - configMap
      - persistentVolumeClaim

persistence:
  enabled: false
  annotations: {}

extraVolumes: ""
  # - name: extras
  #   emptyDir: {}

extraVolumeMounts: ""
  # - name: extras
  #   mountPath: /usr/share/extras
  #   readOnly: true

extraContainers: ""
  # - name: do-something
  #   image: busybox
  #   command: ['do', 'something']

extraInitContainers: ""
  # - name: do-something
  #   image: busybox
  #   command: ['do', 'something']

# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

# By default this will make sure two pods don't end up on the same node
# Changing this to a region would allow you to spread pods across regions
antiAffinityTopologyKey: "kubernetes.io/hostname"

# Hard means that by default pods will only be scheduled if there are enough nodes for them
# and that they will never end up on the same node. Setting this to soft will do this "best effort"
antiAffinity: "hard"

# This is the node affinity settings as defined in
# https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
nodeAffinity: {}


# The default is to deploy all pods serially. By setting this to parallel all pods are started at
# the same time when bootstrapping the cluster
podManagementPolicy: "Parallel"

httpPort: 9600

# Custom ports to add to logstash
extraPorts: []
  # - name: beats
  #   containerPort: 5001

updateStrategy: RollingUpdate

# This is the max unavailable setting for the pod disruption budget
# The default value of 1 will make sure that kubernetes won't allow more than 1
# of your pods to be unavailable during maintenance
maxUnavailable: 1

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# How long to wait for logstash to stop gracefully
terminationGracePeriod: 120

# Probes
# Default probes are using `httpGet` which requires that `http.host: 0.0.0.0` is part of
# `logstash.yml`. If needed probes can be disabled or overrided using the following syntaxes:
#
# disable livenessProbe
# livenessProbe: null
#
# replace httpGet default readinessProbe by some exec probe
# readinessProbe:
#   httpGet: null
#   exec:
#     command:
#       - curl
#      - localhost:9600

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 3

## Use an alternate scheduler.
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""

nodeSelector:
  kops.k8s.io/instancegroup: nodes
tolerations: []

nameOverride: ""
fullnameOverride: ""

lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
  # postStart:
  #   exec:
  #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

service:
  annotations: {}
  type: ClusterIP
  ports:
    - name: beats
      port: 5044
      protocol: TCP
      targetPort: 5044
#    - name: http
#      port: 8080
#      protocol: TCP
#      targetPort: 8080

ingress:
  enabled: false
#  annotations: {}
#  hosts:
#    - host: logstash.local
#      paths:
#        - path: /logs
#          servicePort: 8080
#  tls: []
