replicaCount: 1

resources:
  limits:
    memory: 512MiB
  requests:
    memory: 512MiB

rbacEnable: true
servicePort: 8080

# serviceAccount is the Service account to be used by Lenses to deploy apps
serviceAccount: default

#service
service:
  enabled: true
  type: ClusterIP
  annotations: {}

ingress:
  ## If true, Ingress will be created
  ##
  enabled: false
  host:

  # Ingress annotations
  annotations:
#    kubernetes.io/ingress.class: nginx
#    kubernetes.io/tls-acme: 'true'
#    nginx.ingress.kubernetes.io/rewrite-target: /


image:
  repository: mendersoftware/deployments
  tag: 1.7.0
  pullPolicy: IfNotPresent
storageproxy:
  crt: |
    -----BEGIN CERTIFICATE-----
    MIIBhzCCAS2gAwIBAgIJAJHyam4fO9LvMAoGCCqGSM49BAMCMCAxHjAcBgNVBAMM
    FW1lbmRlci1zMy5mbG90ZWNoLmNvbTAeFw0xNzExMDMxODU3NTJaFw0yNzExMDEx
    ODU3NTJaMCAxHjAcBgNVBAMMFW1lbmRlci1zMy5mbG90ZWNoLmNvbTBZMBMGByqG
    SM49AgEGCCqGSM49AwEHA0IABCf1KuMdMr6TG+gMQVK85cK+VwLjYeijPvat/dcl
    nu50+g6Y1z2W++YyhOQ6M3J4nvQcy7Ryq/N/rIaUAyhhiOqjUDBOMB0GA1UdDgQW
    BBS6Cjam/VT5i9RSPIITsGwat7HRnjAfBgNVHSMEGDAWgBS6Cjam/VT5i9RSPIIT
    sGwat7HRnjAMBgNVHRMEBTADAQH/MAoGCCqGSM49BAMCA0gAMEUCIG3w7ytHgQZe
    PzqPXbLkUUwAvG9+1k29i1EvcIndfd6OAiEA2OonmI0QvkwdpIjkUYRBzwQMBlc9
    dah3uHnRLtsbuVc=
    -----END CERTIFICATE-----

secrets:
  datas:
    DEPLOYMENTS_MONGO_URL: "mongodb.mender.svc.cluster.local:27017"
    STORAGE_BACKEND_CERT: /etc/ssl/certs/storage-proxy.crt
    DEPLOYMENTS_AWS_REGION: us-west-2
    AWS_REGION: us-west-2
    DEPLOYMENTS_AWS_SECRET_ACCESS_KEY: tJW+RY+6GiLN+Se6TBE1XTWCBSEMMAUzfp+aVgPD
    DEPLOYMENTS_AWS_ACCESS_KEY_ID: AKIAJVYDW6MI7XJ7OLOQ
    AWS_SECRET_ACCESS_KEY: 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
    DEPLOYMENTS_AWS_BUCKET: flotech-mender-cherry
    AWS_BUCKET: flotech-mender-cherry
    AWS_ACCESS_KEY_ID: AKIAJVYDW6MI7XJ7OLOQ


config.yaml: |
  listen: :8080

  # HTTP Server middleware environment
  # Available values:
  #   dev - development environment
  #   prod - production environment
  # Defaults to: prod
  # Overwrite with environment variable: DEPLOYMENTS_MIDDLEWARE

  # middleware: dev

  # HTTPS configuration
  # To enable listening using HTTPS protocol please uncomment and configure following section.
  # All fields in https section are required if any set.
  # Defaults to: unset
  # Overwrite with environment variables:
  # - DEPLOYMENTS_HTTPS_CERTIFICATE
  # - DEPLOYMENTS_HTTPS_KEY

  # https:
  #     certificate: /path/to/certificate
  #     key: /path/to/private_key

  # Mongodb connection string
  # Defaults to: "mongo-deployments"
  # Overwrite with environment variable: DEPLOYMENTS_MONGO_URL

  mongo-url: mongodb://mongodb.mender.svc.cluster.local:27017

  # Enable SSL for mongo connections
  # Defaults to: false
  # Overwrite with environment variable: DEPLOYMENTS_MONGO_SSL

  # mongo_ssl: false

  # SkipVerify controls whether a mongo client verifies the
  # server's certificate chain and host name.
  # If InsecureSkipVerify is true, accepts any certificate
  # presented by the server and any host name in that certificate.
  # Defaults to: false
  # Overwrite with environment variable: DEPLOYMENTS_MONGO_SSL_SKIPVERIFY

  # mongo_ssl_skipverify: false

  # Mongodb username
  # Overwrites username set in connection string.
  # Defaults to: none
  # Overwrite with environment variable: DEPLOYMENTS_MONGO_USERNAME

  # mongo_username: user

  # Mongodb password
  # Overwrites password set in connection string.
  # Defaults to: none
  # Overwrite with environment variable: DEPLOYMENTS_MONGO_PASSWORD

  # mongo_password: secret

  # Inventory service address
  # Defaults to: http://mender-inventory:8080
  # Env key: DEPLOYMENTS_MENDER_GATEWAY

  mender-gateway: "http://mender-inventory:8080"

  # AWS configuration section
  aws:
      # AWS region for minio shoud be "us-east-1"
      # Defaults to: us-east-1
      # Overwrite with environment variable: DEPLOYMENTS_AWS_REGION

      region: us-west-2

      # S3 bucket where the uploaded images will be stored and served from.
      # Bucket is required to be created before running the service.
      # Bucket should allow PUT/GET methods using CORS, example CORS conifg:
      #     <CORSConfiguration>
      #     <CORSRule>
      #         <AllowedOrigin>*</AllowedOrigin>
      #         <AllowedMethod>PUT</AllowedMethod>
      #         <AllowedMethod>GET</AllowedMethod>
      #         <MaxAgeSeconds>3000</MaxAgeSeconds>
      #         <AllowedHeader>*</AllowedHeader>
      #     </CORSRule>
      #     </CORSConfiguration>
      # Defaults to: "mender-artifact-storage"
      # Overwrite with environment variable: DEPLOYMENTS_AWS_BUCKET

      bucket: mender-artifact-storage

      # S3 URI
      # Defaults to: none (s3.amazonaws.com)
      # Overwrite with environment variable: DEPLOYMENTS_AWS_URI

      # uri: example.com


      # Artifact Tagging
      # Defaults to: false
      #
      # Set to 'true' if you want to tag artifacts on S3 with tenant_id:<tenant_id>
      # Note that this does not work on minio, and actually overwrites artifacts to an XML file
      #
      # tag_artifact: false
      #
      # Authentication credentials for AWS.
      # AWS role requires READ/WRITE permissions for configured S3 bucket.
      #
      # AWS credentials can be provided with described below methods (checked in sequence):
      #
      # Environment variables:
      # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.
      # If you're working with temporary security credentials,
      # you can also keep the session token in AWS_SESSION_TOKEN.
      #
      # If you're testing with a fake s3 environment, you can specify the uri endpoint with: DEPLOYMENTS_AWS_URI
      #
      # Credentials File:
      # Instead of keeping credentials in environment variables,
      # you can put credentials into a single file that's located in: ~/.aws/credentials
      # An important point is that the default location for the credentials file is a user directory.
      #
      # The format for the credentials is the same for all the SDKs and the AWS CLI:
      #
      #     [default]
      #     aws_access_key_id = ACCESS_KEY
      #     aws_secret_access_key = SECRET_KEY
      #     aws_session_token = TOKEN
      #
      # The aws_session_token value is needed only if you're including temporary security credentials in the file.
      #
      # Alternatively they can be provided directly using "auth" section.
      #
      # Token is optional, it is needed if working with temporaty credentials.
      #
      # In case when none of the credential retrieving methods are set, service will default to retrieving authentication
      # credentials locally from AWS IAM which is prefered method then running the service in EC2
      #
      # Overwrite with environment variables:
      # - DEPLOYMENTS_AWS_AUTH_KEY
      # - DEPLOYMENTS_AWS_AUTH_SECRET
      # - DEPLOYMENTS_AWS_AUTH_TOKEN

      # auth:
      #     key: ACCESS_KEY
      #     secret: SECRET_KEY
      #     token: TOKEN
