version: "3.8"

services:
  app:
    image: flo-water-meter:local
    ports:
      - "8000:8000"
    environment:
      APPLICATION_NAME: "flo-water-meter"
      ENVIRONMENT: "development"
      FLO_HTTP_PORT: 8000
      FLO_KAFKA_CN: "kafka:29092"
      #FLO_KAFKA_CN: kafka-cherry-broker-1.dev.flocloud.co:9092,kafka-cherry-broker-2.dev.flocloud.co:9092,kafka-cherry-broker-3.dev.flocloud.co:9092
      FLO_KAFKA_GROUP_ID: flo-water-meter-local
      FLO_TELEMETRY_LATEST_TOPIC: telemetry-v3-latest
      FLO_REDIS_CN: "redis:6379"
      FLO_TIMESCALE_DB_CN: "postgres://postgres:pwd@timescale:5432?sslmode=disable"
      FLO_API_URL: "https://api-gw-dev.flocloud.co"
      FLO_API_JWT: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiI1RDZFNUQyOC00OTZDLTRCNDMtOTY5Mi00Nzc1QzgzOEE2NkMiLCJpYXQiOjE1ODkzOTc2MjAsImp0aSI6IjcyYTg3NzUwLTU0ZjEtNDFmYS05NTU5LTg1ZGJlOWViNzUwYSJ9.Wi-Su5uN-gIRlkLDEtEEdXWenGze8vVkfVEi_FuBNqs"
      FLO_PRESENCE_HOST: "http://flo-core-service.flocloud.co"
      FLO_LOCAL_DEBUG: "true"
      FLO_DISABLE_BG_SERVICES: "true"
      FLO_TIMESCALE_WRITE_THREADS: 1
      # AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      # AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      FLO_S3_BULK_TELEMETRY_BUCKET: "flocloud-bulk-device-telemetry"
      FLO_S3_BULK_TELEMETRY_V8LF_PATH: "/telemetry-v8.lf.csv.gz/"
      FLO_S3_BULK_TELEMETRY_V7LF_S3_PATH: "/telemetry-v7/"
      FLO_LOG_MIN_LEVEL: 1
      FLO_TIMESCALE_LIVEDATA_CUTOFF_HRS: 24
    volumes:
      - "./src:/src"
      - "${HOME}/.aws:/home/app/.aws"
    #restart: on-failure
    depends_on:
      - kafka
      - timescale
      - redis
    build:
      context: .
      dockerfile: ./Dockerfile.build
      args:
        CI_COMMIT_SHA: "${CI_COMMIT_SHA:-none}"

  redis:
    image: bitnami/redis:latest
    #CONNECT w/ local client (psql can be used instead of redis-cli also): redis-cli -u redis://localhost:6379
    ports:
      - "6379:6379"
    environment:
      - "ALLOW_EMPTY_PASSWORD=yes"
    volumes:
      - "./db/tmp/redis:/bitnami/redis/data"
    restart: on-failure
    logging:
      driver: none

  timescale:
    #what we use in prod, CONNECT w/ local client: pgcli -h localhost -U postgres
    image: timescale/timescaledb:latest-pg11
    ports:
      - "5432:5432"
    volumes:
      - "./db/tmp/postgres:/var/lib/postgresql/data"
      - "./db/ts:/docker-entrypoint-initdb.d"
    restart: on-failure
    environment:
      #NO_TS_TUNE: "false"
      #TIMESCALEDB_TELEMETRY: "off"
      POSTGRES_PASSWORD: "pwd"
    logging:
      driver: none

  zookeeper:
    image: "bitnami/zookeeper:3"
    ports:
      - "2181:2181"
    restart: on-failure
    volumes:
      - "./db/tmp/zookeeper:/bitnami/zookeeper"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
#    logging:
#      driver: none

  #NOTE: both zookeeper & kafka username & pwd are: user & bitnami
  kafka:
    image: "bitnami/kafka:2"
    #CONNECT tail w/ local client (run 2x, 1st run will mk topic): kafkacat -C -b localhost:29092 -t 'email-weekly-loc' -p 0
    #push dummy data w/ local client: echo '{"client_app_name":"kafcat"}' | kafkacat -P -b localhost:29092 -t 'email-weekly-loc' -p 0
    ports:
      - "9092:9092"
      - "29092:29092"
    restart: on-failure
    volumes:
      - "./db/tmp/kafka:/bitnami/kafka"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    depends_on:
      - zookeeper
#    logging:
#      driver: none
