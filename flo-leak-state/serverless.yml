---
service:
  name: flo-leak-state

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline

resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for VPC Connection.
        Roles:
          - {"Ref" : "IamRoleLambdaExecution"}
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"

custom:
  defaultRegion: us-west-2
  accountId: ${env:ACCOUNT_ID}
  region: ${opt:region, self:custom.defaultRegion}
  lambdaRateInMinutes: ${env:LAMBDA_RATE_IN_MINUTES}
  lambdaTimeoutInSeconds: ${env:LAMBDA_TIMEOUT_IN_SECONDS}
  maxExecutionTimeInSeconds: ${env:MAX_EXECUTION_TIME_IN_SECONDS}
  topicEmptyCheckLoopIntervalInMs: ${env:TOPIC_EMPTY_CHECK_LOOP_INTERVAL_IN_MS}
  scheduleExpression: rate(${self:custom.lambdaRateInMinutes} minutes)
  apiUrl: ${env:API_URL}
  apiToken: ${env:API_TOKEN}
  reportStateEndpoint: ${env:REPORT_STATE_ENDPOINT}
  kafkaBrokerList: ${env:KAFKA_BROKER_LIST}
  kafkaGroupId: ${env:KAFKA_GROUP_ID}
  kafkaTopic: ${env:KAFKA_TOPIC}
  kafkaConnectionTimeoutInMs: ${env:KAFKA_CONNECTION_TIMEOUT_IN_MS}
  numberOfMessagesToConsumeAtOnce: ${env:NUMBER_OF_MESSAGES_TO_CONSUME_AT_ONCE}
  leakRelatedAlarmIds: ${env:LEAK_RELATED_ALARM_IDS}
  reportStateFunctionName: ${self:service.name}-${opt:stage}-report-state
  iftttAlertEndpoint: ${env:IFTTT_ALERT_ENDPOINT}
  iftttAlertFunctionName: ${self:service.name}-${opt:stage}-ifttt-realtime-alert

provider:
  name: aws
  runtime: nodejs10.x
  region: ${self:custom.region}
  vpc: ${file(vpc.${opt:stage}.yml):vpc}
  timeout: ${self:custom.lambdaTimeoutInSeconds}
  environment:
    API_URL: ${self:custom.apiUrl}
    API_TOKEN: ${self:custom.apiToken}
    KAFKA_BROKER_LIST: ${self:custom.kafkaBrokerList}
    KAFKA_GROUP_ID: ${self:custom.kafkaGroupId}
    KAFKA_TOPIC: ${self:custom.kafkaTopic}
    KAFKA_CONNECTION_TIMEOUT_IN_MS: ${self:custom.kafkaConnectionTimeoutInMs}
    LEAK_RELATED_ALARM_IDS: ${self:custom.leakRelatedAlarmIds}
    MAX_EXECUTION_TIME_IN_SECONDS: ${self:custom.maxExecutionTimeInSeconds}
    NUMBER_OF_MESSAGES_TO_CONSUME_AT_ONCE: ${self:custom.numberOfMessagesToConsumeAtOnce}
    REPORT_STATE_ENDPOINT: ${self:custom.reportStateEndpoint}
    REPORT_STATE_FUNCTION_NAME: ${self:custom.reportStateFunctionName}
    TOPIC_EMPTY_CHECK_LOOP_INTERVAL_IN_MS: ${self:custom.topicEmptyCheckLoopIntervalInMs}
    IFTTT_ALERT_ENDPOINT: ${self:custom.iftttAlertEndpoint}
    IFTTT_ALERT_FUNCTION_NAME: ${self:custom.iftttAlertFunctionName}

functions:
  handle-entity-activity:
    handler: src/main.handle
    iamRoleStatements:
      - Effect: Allow
        Action: lambda:InvokeFunction
        Resource:
          - arn:aws:lambda:us-west-2:${self:custom.accountId}:function:${self:custom.reportStateFunctionName}
          - arn:aws:lambda:us-west-2:${self:custom.accountId}:function:${self:custom.iftttAlertFunctionName}
    events:
      - schedule: ${self:custom.scheduleExpression}

  report-state:
    handler: src/entity-activity/googleSmartHomeLeakWorker.report

  ifttt-realtime-alert:
    handler: src/entity-activity/iftttWorker.notify
