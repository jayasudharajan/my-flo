# Telegraf configuration

[tags]
    env = "{{ ENVIRONMENT |default('local', true) }}"
    service = "{{ APPLICATION_NAME |default('test-app', true) }}-{{ ENVIRONMENT |default('local', true) }}"
    app = "{{ APPLICATION_NAME |default('test-app', true) }}"

# Configuration for telegraf agent
[agent]
    interval = "10s"
    debug = false
    hostname = "{{ AGENT_HOSTNAME |default('localhost', true) }}"
    round_interval = true
    flush_interval = "10s"
    flush_jitter = "0s"
    collection_jitter = "0s"
    metric_batch_size = 1000
    metric_buffer_limit = 10000
    quiet = false

###############################################################################
#                                  INPUTS                                     #
###############################################################################

[[inputs.cpu]]
    percpu = true
[[inputs.disk]]
[[inputs.io]]
[[inputs.mem]]
[[inputs.net]]
  #   ## By default, telegraf gathers stats from any up interface (excluding loopback)
  #   ## Setting interfaces will tell it to gather these explicit interfaces,
  #   ## regardless of status.
  #   ##
  interfaces = ["eth0"]
[[inputs.system]]
[[inputs.swap]]
[[inputs.netstat]]
[[inputs.processes]]
[[inputs.kernel]]
{% if APPLICATION_PLATFORM == "java" %}
  [[inputs.procstat]]
    exe = "java"
    prefix = "java"
{% elif APPLICATION_PLATFORM == "node" %}
  [[inputs.procstat]]
    exe = "node"
    prefix = "node"
{% endif %}

[[inputs.docker]]
    endpoint = "unix:///var/run/docker.sock"
    container_names = []
# TODO: Add cloudwatch read permissions to the EB app role
#        [[inputs.cloudwatch]]
#                region = 'us-west-2'
#                period = '1m'
#                delay = '1m'
#                interval = '1m'
#                namespace = 'AWS/EBS'
[[inputs.statsd]]
  ## Address and port to host UDP listener on
  service_address = ":{{ STATSD_PORT | default('8125',true) }}"

  ## The following configuration options control when telegraf clears it's cache
  ## of previous values. If set to false, then telegraf will only clear it's
  ## cache when the daemon is restarted.
  ## Reset gauges every interval (default=true)
  delete_gauges = true
  ## Reset counters every interval (default=true)
  delete_counters = true
  ## Reset sets every interval (default=true)
  delete_sets = true
  ## Reset timings & histograms every interval (default=true)
  delete_timings = true

  ## Percentiles to calculate for timing & histogram stats
  percentiles = [90]

  ## separator to use between elements of a statsd metric
  metric_separator = "_"

  ## Parses tags in the datadog statsd format
  ## http://docs.datadoghq.com/guides/dogstatsd/
  parse_data_dog_tags = false

  ## Statsd data translation templates, more info can be read here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md#graphite
  templates = [
    "kamon.kafka-consumer.*.* measurement.metric_category.kafka_topic.field*",
    "kamon.http.*.* measurement.metric_category.http_service.field*",
    "flo_detect.* measurement.field*"
  ]


  ## Number of UDP messages allowed to queue up, once filled,
  ## the statsd server will start dropping packets
  allowed_pending_messages = 10000

  ## Number of timing/histogram values to track per-measurement in the
  ## calculation of percentiles. Raising this limit increases the accuracy
  ## of percentiles but also increases the memory usage and cpu time.
  percentile_limit = 1000

{% if APPLICATION_PLATFORM == "java" %}
  [[inputs.jolokia]]
    ## This is the context root used to compose the jolokia url
    ## NOTE that Jolokia requires a trailing slash at the end of the context root
    context = "/jolokia/"

    ## This specifies the mode used
    # mode = "proxy"
    #
    ## When in proxy mode this section is used to specify further
    ## proxy address configurations.
    ## Remember to change host address to fit your environment.
    # [inputs.jolokia.proxy]
    #   host = "127.0.0.1"
    #   port = "8080"

    ## Optional http timeouts
    ##
    ## response_header_timeout, if non-zero, specifies the amount of time to wait
    ## for a server's response headers after fully writing the request.
    # response_header_timeout = "3s"
    ##
    ## client_timeout specifies a time limit for requests made by this client.
    ## Includes connection time, any redirects, and reading the response body.
    # client_timeout = "4s"

    ## List of servers exposing jolokia read service
    [[inputs.jolokia.servers]]
      name = "{{ APPLICATION_NAME |default('test-app', true) }}-{{ ENVIRONMENT |default('local', true) }}"
      host = "127.0.0.1"
      port = "8778"
      # username = "myuser"
      # password = "mypassword"

    ## List of metrics collected on above servers
    ## Each metric consists in a name, a jmx path and either
    ## a pass or drop slice attribute.
    ## This collect all heap memory usage metrics.
    [[inputs.jolokia.metrics]]
      name = "heap_memory_usage"
      mbean  = "java.lang:type=Memory"
      attribute = "HeapMemoryUsage"

    ## This collect thread counts metrics.
    [[inputs.jolokia.metrics]]
      name = "thread_count"
      mbean  = "java.lang:type=Threading"
      attribute = "TotalStartedThreadCount,ThreadCount,DaemonThreadCount,PeakThreadCount"

    ## This collect number of class loaded/unloaded counts metrics.
    [[inputs.jolokia.metrics]]
      name = "class_count"
      mbean  = "java.lang:type=ClassLoading"
      attribute = "LoadedClassCount,UnloadedClassCount,TotalLoadedClassCount"

    {% if APPLICATION_NAME is defined and 'hivemq' in APPLICATION_NAME %}
    ##### jolokia2 hivemq ########
    [[inputs.jolokia2_agent]]
      name_prefix = "hivemq_"
      tagexclude  = ["jolokia*"]

      # Add agents to query
      urls = ["http://127.0.0.1:8778/jolokia"]

      [[inputs.jolokia2_agent.metric]]
        name  = "network"
        mbean = "metrics:name=com.hivemq.networking.connections.current"
        field_name = "connections"
        paths = ["Value"]

      [[inputs.jolokia2_agent.metric]]
        name  = "cluster"
        field_name = "nodes"
        mbean = "metrics:name=com.hivemq.cluster.nodes.count"
        paths = ["Value"]

      # Catch All is disabled, we use our own field names (short ones). Although this could be used.
#      [[inputs.jolokia2_agent.metric]]
#        name  = "messages"
#        field_name = "$1"
#        mbean = "metrics:name=com.hivemq.messages.*.*.count"
#        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "outgoing_total"
        mbean = "metrics:name=com.hivemq.messages.outgoing.total.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "incoming_total"
        mbean = "metrics:name=com.hivemq.messages.incoming.total.count"
        paths = ["Count"]


      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "incoming_connect"
        mbean = "metrics:name=com.hivemq.messages.incoming.connect.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "incoming_disconnect"
        mbean = "metrics:name=com.hivemq.messages.incoming.disconnect.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "incoming_publish"
        mbean = "metrics:name=com.hivemq.messages.incoming.publish.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "outgoing_publish"
        mbean = "metrics:name=com.hivemq.messages.outgoing.publish.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "incoming_subscribe"
        mbean = "metrics:name=com.hivemq.messages.incoming.subscribe.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "incoming_unsubscribe"
        mbean = "metrics:name=com.hivemq.messages.incoming.unsubscribe.count"
        paths = ["Count"]

      # Dropped
      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "dropped_before_publish_send"
        mbean = "metrics:name=com.hivemq.messages.dropped.before-publish-send.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "dropped_in_flight_window"
        mbean = "metrics:name=com.hivemq.messages.dropped.in-flight-window.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "dropped_internal_error"
        mbean = "metrics:name=com.hivemq.messages.dropped.internal-error.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "dropped_not_connected"
        mbean = "metrics:name=com.hivemq.messages.dropped.not-connected.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "dropped_not_writable"
        mbean = "metrics:name=com.hivemq.messages.dropped.not-writable.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "dropped_qos_0_queue_not_empty"
        mbean = "metrics:name=com.hivemq.messages.dropped.qos-0-queue-not-empty.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "dropped_queue_full"
        mbean = "metrics:name=com.hivemq.messages.dropped.queue-full.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "queued"
        mbean = "metrics:name=com.hivemq.messages.queued.count"
        paths = ["Count"]

      [[inputs.jolokia2_agent.metric]]
        name  = "messages"
        field_name = "retained"
        mbean = "metrics:name=com.hivemq.messages.retained.current"
        paths = ["Value"]

    {% endif %}


{% endif %}
###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[[outputs.influxdb]]
    {% if INFLUXDB_TICK_HOST is defined %}
    urls = ["http://{{ INFLUXDB_TICK_HOST }}:8086"]
    {% else %}
    urls = ["{{ INFLUXDB_TICK_URL | default('https://influxdb.flotech.co:8086') }}"]
    username = "{{ INFLUXDB_TICK_USERNAME | default('telegraf') }}"
    password = "{{ INFLUXDB_TICK_PASSWORD | default('_i_love_defaults_') }}"
    {% endif %}

    database = "telegraf"
    precision = "s"

{% if ENVIRONMENT != "local" and DATADOG_ENABLED == "true" %}
[[outputs.datadog]]
  apikey = "{{ DATADOG_API_KEY | default('provide-key-here')}}"
  namepass = ["hivemq*", "cpu", "disk", "mem"]
{% endif %}
