---
# We sync sensitive data from s3 so we don't have to check it in.

container_commands:
  1_command:
    command: /opt/elasticbeanstalk/hooks/appdeploy/pre/50-s3-sync.sh

files:
  # This file is placed first, because of alphabetical order
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/50-s3-sync.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      source /etc/env

      staging_dir=$(/opt/elasticbeanstalk/bin/get-config container | jq -r ".app_staging_dir")
      deploy_dir=$(/opt/elasticbeanstalk/bin/get-config container | jq -r ".app_deploy_dir")

      if [[ ! -z "${DATA_SYNC_FROM_S3:-}" ]]
      then
        if [[ "$DATA_SYNC_FROM_S3" == "true" ]]
        then
          if [[ -d "${staging_dir}" ]]
          then
            app_dir="${staging_dir}"
          else
            app_dir="${deploy_dir}"
          fi

          if [[ -f "${app_dir}/Dockerrun.aws.json" ]]
          then
            echo "Found ${app_dir}/Dockerrun.aws.json"
            # DATA_SYNC_S3_PATH = "s3://bucket/path"
            for volume in $(cat ${app_dir}/Dockerrun.aws.json |  jq -r '.volumes[].name');
            do
              if echo "$volume" | grep -q "s3"
              then
                  host_dir=$(cat ${app_dir}/Dockerrun.aws.json |  jq -r ".volumes[] | select(.name==\"$volume\") | .host.sourcePath")
                  s3_dir=${volume#s3-}
                  echo "$s3_dir: $host_dir"
                  aws s3 sync "s3://${DATA_SYNC_S3_PATH}/${s3_dir}" "${host_dir}"
              fi
            done
          else
            echo "Didn't find ${app_dir}/Dockerrun.aws.json. Disable DATA_SYNC_FROM_S3?"
            exit 1
          fi
        fi
      fi


  "/opt/elasticbeanstalk/hooks/restartappserver/pre/50-s3-sync.sh":
    mode: "120755"
    content: "/opt/elasticbeanstalk/hooks/appdeploy/pre/50-s3-sync.sh"

  "/opt/elasticbeanstalk/hooks/configdeploy/pre/50-s3-sync.sh":
    mode: "120755"
    content: "/opt/elasticbeanstalk/hooks/appdeploy/pre/50-s3-sync.sh"
