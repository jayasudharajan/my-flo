# Two parts that are making sure we have fresh eb env vars

container_commands:
  1_command:
    command: /opt/elasticbeanstalk/hooks/appdeploy/pre/10-env.sh

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/10-env.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      (/opt/elasticbeanstalk/bin/get-config environment | jq -r $'to_entries[] | "export \(.key)=\'\(.value)\'"') > /etc/env && source /etc/env

      if [[ ! -z "${ENV_FROM_S3:-}" ]]
      then
        if [[ "$ENV_FROM_S3" == "True" ]] || [[ "$ENV_FROM_S3" == "true" ]]
        then
          # Download s3 cform env with using bucket URL and bucket name taken from ENV
          aws s3 cp "s3://${CFORM_ENV_S3_CONFIG_BUCKET}/flo-apps/${APPLICATION_NAME}/${ENVIRONMENT}/${ENVIRONMENT}-${APPLICATION_NAME}.env.json.gz" "/etc/${ENVIRONMENT}-${APPLICATION_NAME}.env.json.gz"

          # Decrypt s3 cform env, append decrypted env to /etc/env
          # This overwrites /etc/env file
          (cat "/etc/${ENVIRONMENT}-${APPLICATION_NAME}.env.json.gz" | gzip -d | openssl aes-256-cbc -a -salt -d -k "${CFORM_ENV_KEY}" | jq -r $'to_entries[] | "export \(.key)=\'\(.value)\'"') > /etc/env && source /etc/env

          # Source EB Again to override any s3-sourced envs
          (/opt/elasticbeanstalk/bin/get-config environment | jq -r $'to_entries[] | "export \(.key)=\'\(.value)\'"') >> /etc/env && source /etc/env
        fi
      fi
  "/opt/elasticbeanstalk/hooks/restartappserver/pre/10-env.sh":
    mode: "120755"
    content: "/opt/elasticbeanstalk/hooks/appdeploy/pre/10-env.sh"

  "/opt/elasticbeanstalk/hooks/configdeploy/pre/10-env.sh":
    mode: "120755"
    content: "/opt/elasticbeanstalk/hooks/appdeploy/pre/10-env.sh"
