version: '2'

services:
  app:
    build:
      context: .
      dockerfile: ./Dockerfile-base
    ports:
      - "8000:8000"
      - "9001:9001"
    container_name: flo-api
    image: registry.gitlab.com/flotechnologies/flo-api
    environment:
      # Defaults here
      NODE_ENV: circleci
      APPLICATION_NAME: flo-api
      ENVIRONMENT: local
      NEW_RELIC_LICENSE_KEY:
    volumes:
      - ./logs:/var/log/app
      - ./.docker/templates/:/etc/templates/



  dev:
    container_name: dev
    extends: app
    environment:
      FLO_API_AWS_DYNAMODB_REGION: us-west-2
      FLO_API_AWS_DYNAMODB_ENDPOINT: http://dynamodb:4567
      FLO_API_AWS_DYNAMODB_PREFIX: local
      FLO_API_PORT: 8000
      FLO_API_MQTT_BROKER_HOST: hivemq
      FLO_API_MQTT_BROKER_PORT: 8883
      FLO_API_KAFKA_HOST: kafka
      FLO_API_KAFKA_KEY_ID: ${FLO_API_KAFKA_KEY_ID}
      FLO_API_KAFKA_ENCRYPTION_ENABLED: "false"

#        FLO_API_AWS_API_VERSION: ${FLO_API_AWS_API_VERSION}
#        FLO_API_AWS_DYNAMODB_REGION: ${FLO_API_AWS_DYNAMODB_REGION}
#        FLO_API_AWS_DYNAMODB_ENDPOINT: ${FLO_API_AWS_DYNAMODB_ENDPOINT}
#        FLO_API_AWS_DYNAMODB_PREFIX: ${FLO_API_AWS_DYNAMODB_PREFIX}
#        FLO_API_MQTT_BROKER_HOST: ${FLO_API_MQTT_BROKER_HOST}
#        FLO_API_MQTT_BROKER_PORT: ${FLO_API_MQTT_BROKER_PORT}
#        FLO_API_PORT: ${FLO_API_PORT}
#        FLO_API_TOKENSECRET: ${FLO_API_TOKENSECRET}
#        FLO_API_TOKEN_EXPIRATION: ${FLO_API_TOKEN_EXPIRATION}
#        FLO_API_ELASTICACHE_ENDPOINT: ${FLO_API_ELASTICACHE_ENDPOINT}
#        FLO_API_SENDWITHUS_API_KEY: ${FLO_API_SENDWITHUS_API_KEY}
#        FLO_API_INFLUXDB_HOST: ${FLO_API_INFLUXDB_HOST}
#        FLO_API_INFLUXDB_PORT: ${FLO_API_INFLUXDB_PORT}
#        FLO_API_INFLUXDB_DATABASE: ${FLO_API_INFLUXDB_DATABASE}
#        FLO_API_INFLUXDB_USER: ${FLO_API_INFLUXDB_USER}
#        FLO_API_INFLUXDB_PASSWORD: ${FLO_API_INFLUXDB_PASSWORD}
#        FLO_API_MQTT_CAFILE: ${FLO_API_MQTT_CAFILE}
#        FLO_API_CLIENT_CERT: ${FLO_API_CLIENT_CERT}
#        FLO_API_CLIENT_KEY: ${FLO_API_CLIENT_KEY}
#        FLO_API_CERT_BUCKET: ${FLO_API_CERT_BUCKET}
#        FLO_API_KAFKA_HOST: ${FLO_API_KAFKA_HOST}
#        FLO_API_KEY_PROVIDER_BUCKET_REGION: ${FLO_API_KEY_PROVIDER_BUCKET_REGION}
#        FLO_API_KEY_PROVIDER_BUCKET_NAME: ${FLO_API_KEY_PROVIDER_BUCKET_NAME}
#        FLO_API_KAFKA_PROVIDER_KEY_PATH_TEMPLATE: ${FLO_API_KAFKA_PROVIDER_KEY_PATH_TEMPLATE}
#        FLO_API_KAFKA_KEY_ID: ${FLO_API_KAFKA_KEY_ID}
#        FLO_API_KAFKA_ENCRYPTION_ENABLED: ${FLO_API_KAFKA_ENCRYPTION_ENABLED}
#        FLO_API_DYNAMODB_PROVIDER_KEY_PATH_TEMPLATE: ${FLO_API_DYNAMODB_PROVIDER_KEY_PATH_TEMPLATE}
#        FLO_API_DYNAMODB_KEY_ID: ${FLO_API_DYNAMODB_KEY_ID}
#        FLO_API_DYNAMODB_ENCRYPTION_ENABLED: ${FLO_API_DYNAMODB_ENCRYPTION_ENABLED}
#        FLO_API_HMAC_KEY: ${FLO_API_HMAC_KEY}
#        FLO_API_PES: ${FLO_API_PES}
#        MOBILE_REGISTRATION_URL: ${MOBILE_REGISTRATION_URL}
#        FLO_API_PKI_KAFKA_TOPIC: ${FLO_API_PKI_KAFKA_TOPIC}
#        FLO_API_DIRECTIVES_KAFKA_TOPIC: ${FLO_API_DIRECTIVES_KAFKA_TOPIC}
#        FLO_API_NOTIFICATIONS_KAFKA_TOPIC: ${FLO_API_NOTIFICATIONS_KAFKA_TOPIC}
#        FLO_API_ADMIN_URL: ${FLO_API_ADMIN_URL}
#        FLO_API_USER_URL: ${FLO_API_USER_URL}
#        NOT_FORCE_UPDATE_FOR_MOBILE_APP_IOS_VERSIONS: ${NOT_FORCE_UPDATE_FOR_MOBILE_APP_IOS_VERSIONS}
#        LATEST_APP_VERSION_IOS: ${LATEST_APP_VERSION_IOS}
#        LATEST_APP_VERSION_APP_STORE_URL: ${LATEST_APP_VERSION_APP_STORE_URL}
#        FLO_API_FLO_DEVICE_DEFAULT_WEBSOCKET_TOKEN: ${FLO_API_FLO_DEVICE_DEFAULT_WEBSOCKET_TOKEN}
    volumes:
      - ./:/app/
      - "${HOME}/.container-cache/.npm:/root/.npm"
    depends_on:
      - redis
      - dynamodb
      - kafka


  local:
    container_name: local
    extends: app
    environment:
      ENFORCE_HTTPS: "false"
      TELEGRAF_ENABLED: "false"
      FLO_API_AWS_DYNAMODB_REGION: us-west-2
      FLO_API_AWS_DYNAMODB_ENDPOINT: http://dynamodb:4567
      FLO_API_AWS_DYNAMODB_PREFIX: local
      FLO_API_PORT: 8000
      FLO_API_MQTT_BROKER_HOST: hivemq
      FLO_API_MQTT_BROKER_PORT: 8883
      FLO_API_KAFKA_HOST: kafka
      FLO_API_KAFKA_KEY_ID: ${FLO_API_KAFKA_KEY_ID}
      FLO_API_KAFKA_ENCRYPTION_ENABLED: "false"

    depends_on:
      - redis
      - dynamodb
      - kafka

  dynamodb:
    image: cnadiminti/dynamodb-local
    container_name: dynamodb
    entrypoint: "/usr/bin/java -Xms256m -Xmx256m -Djava.library.path=. -jar DynamoDBLocal.jar --inMemory -sharedDb -port 4567"

    ports:
      - "4567:4567"

  kafka:
    image: 098786959887.dkr.ecr.us-west-2.amazonaws.com/flo-kafka:2.12-0.10.2.1-alpine
    container_name: kafka
    environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
      LOG_RETENTION_HOURS: 336

  redis:
    image: redis:3.2.9-alpine
    container_name: redis



  ######################################################
  # Build Services
  ######################################################
  build:
    image: registry.gitlab.com/flotechnologies/devops/flo-node-docker:node-6.13.1-alpine-build
    command: /bin/bash -c "install-bintray && npm install && gulp build"
    environment:
      BINTRAY_USER: "${BINTRAY_USER}"
      BINTRAY_KEY: "${BINTRAY_KEY}"
      APPLICATION_NAME: app
      npm_config_cache: "./.npm"
    volumes:
      - ./:/app/
      - .npm:/root/.npm


  test:
    image: registry.gitlab.com/flotechnologies/devops/flo-node-docker:node-6.13.1-alpine-build
    container_name: test
    depends_on:
      - dynamodb
      - local

    environment:
      NODE_ENV: circleci    #  Set CircleCI NODE_ENV
      APPLICATION_NAME: flo-api
      ENFORCE_HTTPS: "false"
      ENVIRONMENT: local
      MOCHA_FILE: /app/test-results/test-results.xml
      FLO_API_AWS_DYNAMODB_ENDPOINT: http://dynamodb:4567
      FLO_API_QR_CODES_BUCKET: devices
      FLO_API_QR_CODES_PATH_TEMPLATE: test-device/qrcode/

    volumes:
      - ./:/app
      - ".npm:/root/.npm"
      - ./tests:/app/tests
      - "./test-results:/app/test-results"

    command: |
      /bin/bash -c " \
        echo \"Running tests: $$APPLICATION_NAME\" && \
        npm install && \
        (/app/node_modules/.bin/_mocha --compilers js:babel-core/register --reporter mocha-circleci-reporter './tests/mocha/**/*.js') && \
        printf 'PING: ' && curl -s local:8000 > /dev/null && echo 'OK' || (printf 'FAIL' && exit 1)\
      "
