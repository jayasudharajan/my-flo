buildscript {
    ext.kotlin_version = '1.2.31'
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.3"
        classpath "net.ltgt.gradle:gradle-errorprone-plugin:0.0.13"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"
        classpath 'com.novoda:bintray-release:0.4.0'
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

apply plugin: 'java'
apply plugin: "kotlin"
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: "net.ltgt.errorprone"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "net.ltgt.apt"
apply plugin: "org.sonarqube"

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven {
        url  "http://flo.bintray.com/maven"
        credentials {
            username hasProperty('BINTRAY_USER') ? BINTRAY_USER : "$System.env.BINTRAY_USER"
            password hasProperty('BINTRAY_KEY') ? BINTRAY_KEY : "$System.env.BINTRAY_KEY"
        }
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile 'com.hivemq:hivemq-spi:3.4.0'
    compile 'com.google.guava:guava:19.0'
    //compile 'com.google.guava:guava:25.1-jre'
    //compile 'org.apache.commons:commons-lang3:3.4'
    //compile 'org.slf4j:slf4j-api:1.7.12'
    //compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    //compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'org.apache.kafka:kafka-clients:1.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.10.0'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.squareup.moshi:moshi:1.5.0'
    compile 'com.bluelinelabs:logansquare:1.3.6'
    compile 'com.flotechnologies:flo-sdk:0.0.71'
    compile 'io.reactivex.rxjava2:rxjava:2.0.8'

    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile 'com.github.yongjhih:routs:feac1f45ef'
    compileOnly "com.google.auto.value:auto-value:1.5"
    apt "com.google.auto.value:auto-value:1.5"
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    apt "com.uber.nullaway:nullaway:0.4.2"
    //errorprone "com.google.errorprone:error_prone_core:2.1.3"
    errorprone "com.google.errorprone:error_prone_core:2.3.0"
    compile 'com.google.firebase:firebase-admin:5.10.0'

    // rx
    compile 'com.github.yongjhih.rxfirebase:rxfirebase2-admin:0.0.3'
    //compile 'com.github.yongjhih:rx-hivemq:1.0.0'
    //compile 'net.javacrumbs.future-converter:future-converter-guava-rxjava2:1.1.0'

    //compile 'javax.annotation:jsr250-api:1.0'
    //compile 'javax.annotation:jsr305:1.0'
    //compile 'org.jetbrains:annotations:15.0'
    //compile 'org.jetbrains:annotations-java5:15.0'

    testCompile 'org.jetbrains.spek:spek-api:1.1.5'
    testCompile 'org.junit.platform:junit-platform-runner:1.0.0'
    //testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //testCompile "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
    //testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testCompile 'org.mockito:mockito-core:2.2.9'
    testCompile "com.nhaarman:mockito-kotlin:1.5.0"
    testCompile 'org.assertj:assertj-core:2.5.0'
    //testCompile 'org.assertj:assertj-guava:2.5.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.5.0'
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat "full"
    events "passed", "skipped", "failed", "standardOut", "standardError"
    showStandardStreams = true
  }
}

//jar {
//  manifest {
//    attributes 'Main-Class': "com.loopj.example.App"
//  }
//}

apply from: 'javadoc.gradle'
apply from: 'jacoco.gradle'
junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }

    enableStandardTestTask true
}

apply from: 'bintray.gradle'

// proguard
// ref. https://github.com/MinecraftForge/Installer/blob/master/build.gradle
// ref. https://github.com/dreamhead/moco/blob/master/moco-runner/build.gradle
task proguard(type: proguard.gradle.ProGuardTask) {
    injars "${buildDir}/libs"
    outjars "${buildDir}/libs-proguard"
    configuration 'proguard.pro'
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    configuration 'okhttp3.pro'
    configuration 'slf4j.pro'
    configuration 'kafka.pro'
    configuration 'hivemq.pro'
    configuration 'guava.pro'
    configuration 'gson.pro'
    configuration 'flo-hivemq-plugin.pro'
    configuration 'retrofit2.pro'
    configuration 'kotlin.pro'
}

tasks.proguard {
    dependsOn 'assemble'
}

shadowJar {
    baseName = 'flo-hivemq-plugin-standalone'
    classifier = ''

    dependencies {
        exclude(dependency('com.hivemq:hivemq-spi'))
        exclude(dependency('com.google.guava:guava'))
        exclude(dependency('org.slf4j:slf4j-log4j12'))
        exclude(dependency('ch.qos.logback:logback-core'))
        exclude(dependency('ch.qos.logback:logback-classic'))

        exclude(dependency('junit:junit'))
        exclude(dependency("org.jetbrains.spek:spek-api"))
        exclude(dependency("org.junit.platform:junit-platform-runner"))
        exclude(dependency("org.jetbrains.spek:spek-junit-platform-engine"))
        exclude(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
        exclude(dependency("org.jetbrains.kotlin:kotlin-runtime"))
        exclude(dependency("org.mockito:mockito-core"))
        exclude(dependency("com.nhaarman:mockito-kotlin"))
        exclude(dependency("org.assertj:assertj-core"))
    }
}

tasks.withType(JavaCompile) {
    // remove the if condition if you want to run NullAway on test code
    if (!name.toLowerCase().contains("test")) {
        options.compilerArgs += ["-Xep:NullAway:ERROR",
                                 "-XepOpt:NullAway:AnnotatedPackages=com.flotechnologies.annotations",
                                 "-XepExcludedPaths:.*/build/generated/.*"]
    }
}
