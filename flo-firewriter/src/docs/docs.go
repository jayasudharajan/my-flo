// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-11-24 21:48:54.403907 -0800 PST m=+0.028577492

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ping": {
            "get": {
                "description": "checks the health status of the service and list its config data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "checks the health status of the service and list its config data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Ping"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/firestore/auth": {
            "post": {
                "description": "generates custom JWT token to authenticate clients with Firestore limiting access to specified asset ids\nit is achieved by passing the ids of customer's asset such as devices in the request body which is going to be baked in as a custom claim \"ids\" into the jwt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "security"
                ],
                "summary": "generates custom JWT token to authenticate clients with Firestore",
                "parameters": [
                    {
                        "description": "Input",
                        "name": "firestoreAuth",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.FirestoreAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.FirestoreToken"
                        }
                    },
                    "400": {
                        "description": "parameter ids has to be a string\" \"parameter ids can not be empty",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to generate firestore jwt",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/firestore/devices/{deviceId}": {
            "get": {
                "description": "dgets real time device data doc from firestore",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "gets real time device data doc from firestore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device MAC Address",
                        "name": "deviceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.GenericMap"
                        }
                    },
                    "400": {
                        "description": "deviceId value has to be 12 characters long containing alphanumeric characters restricted to a-f or A-F letters, provided f045da2cc1edddddd",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to get deviceId_f045da2cc1ed doc from firestore devices collection, err: \u003cerror\u003e",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "writes real time device data to firestore",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "writes real time device data to firestore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device MAC Address",
                        "name": "deviceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "If string is 'true', will block until firestore commits data",
                        "name": "sync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "202": {},
                    "400": {
                        "description": "failed to bind request body with device map",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to marshal deviceData map for deviceId f045da2cc1ed",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes real time device data doc from firestore",
                "tags": [
                    "devices"
                ],
                "summary": "deletes real time device data doc from firestore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device MAC Address",
                        "name": "deviceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "deviceId value has to be 12 characters long containing alphanumeric characters restricted to a-f or A-F letters, provided f045da2cc1edddddd",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to delete deviceId_f045da2cc1ed doc from firestore devices collection, err: \u003cerror\u003e",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/firestore/locations/{locationId}": {
            "post": {
                "description": "writes locations data to firestore",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "writes locations data to firestore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "locationId",
                        "name": "locationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "blocking call if sync=true",
                        "name": "sync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.GenericMap"
                            }
                        }
                    },
                    "400": {
                        "description": "failed to bind request body with location map",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to marshal locationData map for userId_07d3cec0-09aa-49ef-83ec-9ce0c9f0658a",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/firestore/users/{userId}": {
            "post": {
                "description": "users data to firestore",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "users data to firestore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "userId",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "blocking call if sync=true",
                        "name": "sync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "202": {},
                    "400": {
                        "description": "failed to bind request body with user map",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "failed to marshal userData map for userId_08d3cec0-09ba-49ff-83ec-9ce0c9f0658b",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/stats": {
            "get": {
                "description": "gets writes stats from the firewriter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "gets writes stats from the firewriter",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.GenericMap"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "main.FirestoreAuth": {
            "type": "object",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[0c1c57aea625",
                        "0c1c57aec334]"
                    ]
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[07f97c2f-81b1-42d9-ac2c-b4675810319e",
                        "06f97c2f-71b1-53d9-ac2c-b4675801210e]"
                    ]
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[08f97c2f-51b1-22d9-ac2c-b4675810310e",
                        "16f97c2f-01b1-53d9-ac2c-b4675801210a]"
                    ]
                }
            }
        },
        "main.FirestoreToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "tbd"
                }
            }
        },
        "main.GenericMap": {
            "type": "object",
            "additionalProperties": {
                "type": "object"
            }
        },
        "main.Ping": {
            "type": "object",
            "properties": {
                "buildDate": {
                    "type": "string",
                    "example": "2019-05-03T18:44:37Z"
                },
                "commitName": {
                    "type": "string",
                    "example": "cleanup_and_todo"
                },
                "commitSha": {
                    "type": "string",
                    "example": "b32ecf837b64055626a7403c15c8fb8195f4197a"
                },
                "env": {
                    "type": "string",
                    "example": "dev"
                },
                "serviceName": {
                    "type": "string",
                    "example": "flo-firewriter"
                },
                "stats": {
                    "type": "object"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2019-05-03T18:44:37Z"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
