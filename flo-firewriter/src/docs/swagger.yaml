definitions:
  main.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  main.FirestoreAuth:
    properties:
      devices:
        example:
        - '[0c1c57aea625'
        - 0c1c57aec334]
        items:
          type: string
        type: array
      locations:
        example:
        - '[07f97c2f-81b1-42d9-ac2c-b4675810319e'
        - 06f97c2f-71b1-53d9-ac2c-b4675801210e]
        items:
          type: string
        type: array
      users:
        example:
        - '[08f97c2f-51b1-22d9-ac2c-b4675810310e'
        - 16f97c2f-01b1-53d9-ac2c-b4675801210a]
        items:
          type: string
        type: array
    type: object
  main.FirestoreToken:
    properties:
      token:
        example: tbd
        type: string
    type: object
  main.GenericMap:
    additionalProperties:
      type: object
    type: object
  main.Ping:
    properties:
      buildDate:
        example: "2019-05-03T18:44:37Z"
        type: string
      commitName:
        example: cleanup_and_todo
        type: string
      commitSha:
        example: b32ecf837b64055626a7403c15c8fb8195f4197a
        type: string
      env:
        example: dev
        type: string
      serviceName:
        example: flo-firewriter
        type: string
      stats:
        type: object
      timestamp:
        example: "2019-05-03T18:44:37Z"
        type: string
    type: object
info:
  contact: {}
  license: {}
paths:
  /ping:
    get:
      consumes:
      - application/json
      description: checks the health status of the service and list its config data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Ping'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: checks the health status of the service and list its config data
      tags:
      - service
  /v1/firestore/auth:
    post:
      consumes:
      - application/json
      description: |-
        generates custom JWT token to authenticate clients with Firestore limiting access to specified asset ids
        it is achieved by passing the ids of customer's asset such as devices in the request body which is going to be baked in as a custom claim "ids" into the jwt
      parameters:
      - description: Input
        in: body
        name: firestoreAuth
        schema:
          $ref: '#/definitions/main.FirestoreAuth'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.FirestoreToken'
        "400":
          description: parameter ids has to be a string" "parameter ids can not be
            empty
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: failed to generate firestore jwt
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: generates custom JWT token to authenticate clients with Firestore
      tags:
      - security
  /v1/firestore/devices/{deviceId}:
    delete:
      description: deletes real time device data doc from firestore
      parameters:
      - description: Device MAC Address
        in: path
        name: deviceId
        required: true
        type: string
      responses:
        "204": {}
        "400":
          description: deviceId value has to be 12 characters long containing alphanumeric
            characters restricted to a-f or A-F letters, provided f045da2cc1edddddd
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: 'failed to delete deviceId_f045da2cc1ed doc from firestore
            devices collection, err: <error>'
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: deletes real time device data doc from firestore
      tags:
      - devices
    get:
      description: dgets real time device data doc from firestore
      parameters:
      - description: Device MAC Address
        in: path
        name: deviceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.GenericMap'
        "400":
          description: deviceId value has to be 12 characters long containing alphanumeric
            characters restricted to a-f or A-F letters, provided f045da2cc1edddddd
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: 'failed to get deviceId_f045da2cc1ed doc from firestore devices
            collection, err: <error>'
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: gets real time device data doc from firestore
      tags:
      - devices
    post:
      consumes:
      - application/json
      description: writes real time device data to firestore
      parameters:
      - description: Device MAC Address
        in: path
        name: deviceId
        required: true
        type: string
      - description: If string is 'true', will block until firestore commits data
        in: query
        name: sync
        type: string
      responses:
        "200": {}
        "202": {}
        "400":
          description: failed to bind request body with device map
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: failed to marshal deviceData map for deviceId f045da2cc1ed
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: writes real time device data to firestore
      tags:
      - devices
  /v1/firestore/locations/{locationId}:
    post:
      consumes:
      - application/json
      description: writes locations data to firestore
      parameters:
      - description: locationId
        in: path
        name: locationId
        required: true
        type: string
      - description: blocking call if sync=true
        in: query
        name: sync
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.GenericMap'
            type: array
        "400":
          description: failed to bind request body with location map
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: failed to marshal locationData map for userId_07d3cec0-09aa-49ef-83ec-9ce0c9f0658a
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: writes locations data to firestore
      tags:
      - locations
  /v1/firestore/users/{userId}:
    post:
      consumes:
      - application/json
      description: users data to firestore
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: string
      - description: blocking call if sync=true
        in: query
        name: sync
        type: string
      responses:
        "200": {}
        "202": {}
        "400":
          description: failed to bind request body with user map
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: failed to marshal userData map for userId_08d3cec0-09ba-49ff-83ec-9ce0c9f0658b
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: users data to firestore
      tags:
      - users
  /v1/stats:
    get:
      description: gets writes stats from the firewriter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.GenericMap'
            type: array
      summary: gets writes stats from the firewriter
      tags:
      - service
swagger: "2.0"
